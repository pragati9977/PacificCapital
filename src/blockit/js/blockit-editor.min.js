if(document.querySelector('.blockit-pages-action') !== null) {
    // all required elements
    const pageForm = document.getElementById('page-form')
    const sortableCanvas = document.querySelector('.sortable-canvas')
    const libraryWrap = document.querySelector('.sortable-library')
    const params = new URLSearchParams(window.location.search)

    // form element
    const inputPageNameEl = document.getElementById('page-name')
    const inputPageTypeEl = document.getElementById('page-type')
    const inputPageTitleEl = document.getElementById('page-title')

    // slideshow buffer data
    const slideBufferData = []

    // socket list of all file names in section directory
    document.addEventListener('readystatechange', () => {
        if(document.readyState == 'complete') {
            // send trigger to host
            ___browserSync___.socket.emit('triggerPageData', 'empty')

            // receive sections list data from host
            ___browserSync___.socket.once('sectionPageData', data => createListSections(data, slideBufferData))

            // receive slideshows data from host
            ___browserSync___.socket.once('sectionComponentData', data => JSON.parse(data).slideshows.forEach(item => slideBufferData.push(item)))

            // run pages method
            addPage()
            editPage()

            // activate edit html button when section added in canvas
            UIkit.util.on(sortableCanvas, 'added', function () {
                const activateModal = sortableCanvas.querySelectorAll('.uk-inline-clip')

                activateModal.forEach(element => {
                    element.querySelector('.uk-transition-fade').remove()
                    if(element.querySelector('.uk-transition-fade') == null) {
                        const section = element.querySelector('img').getAttribute('alt')
                        const modalEl = document.createElement('div')
                        modalEl.classList.add('uk-transition-fade', 'uk-position-cover', 'uk-flex', 'uk-flex-center', 'uk-flex-middle')
                        modalEl.innerHTML = `<a href="#html-${section}" class="uk-button uk-button-secondary uk-border-rounded" data-uk-toggle><i class="fas fa-code fa-sm uk-margin-small-right"></i>Edit HTML code</a>
                        <div id="html-${section}" class="uk-modal-container uk-flex-top" data-uk-modal>
                            <div class="uk-modal-dialog uk-modal-body uk-margin-auto-vertical uk-border-rounded blockit-code-editor">
                                <div id="editor-${section}"></div>
                                <div class="uk-flex uk-flex-right">
                                    <button class="uk-button uk-button-secondary uk-border-rounded uk-modal-close" type="button">Cancel</button>
                                    <button class="uk-button uk-button-primary uk-border-rounded uk-margin-small-left editor-save-btn" type="button">Save code</button>
                                </div>
                            </div>
                        </div>`
                        if(element.querySelector('img').getAttribute('alt').includes('component')) {
                            modalEl.innerHTML = `<a href="components.html#${trimTitle(element.querySelector('img').getAttribute('alt'))}" class="uk-button uk-button-secondary uk-border-rounded" data-uk-toggle><i class="fas fa-wrench fa-sm uk-margin-small-right"></i>Edit ${trimTitle(element.querySelector('img').getAttribute('alt'))}</a>`
                        }
                        element.appendChild(modalEl)
                    }
                })
            })

            // run section html editor
            document.addEventListener('click', e => {
                if (e.target.getAttribute('href') !== null && e.target.getAttribute('href').includes('#html')) {
                    const holderId = e.target.getAttribute('href').replace('#html', 'editor')
                    const holderEl = document.getElementById(holderId)
                    const nameFile = holderId.replace('editor-', '')

                    // send trigger to host
                    ___browserSync___.socket.emit('readContentData', nameFile)

                    // receive section content data for section editor
                    ___browserSync___.socket.once('processContentData', async contentObj => {
                        const data = await contentObj
                        sectionEditor(holderEl, sectionEditorSave, data, nameFile)
                    })
                }
            })
        }
    })

    // add new page function
    function addPage() {
        if(params.get('addPage') == 'true') {
            // set focus to input page name
            inputPageNameEl.focus()

            showMessageCanvas()
            savePage()
        }
    }

    // edit page function
    function editPage() {
        const sections = JSON.parse(params.get('sections'))

        if(params.get('addPage') == 'false') {
            // heading title information
            pageForm.parentElement.querySelector('h4').innerText = `Edit '${params.get('pageName')}' page item`

            // fill data value to each input element
            inputPageNameEl.value = params.get('pageName')
            inputPageTypeEl.value = params.get('layoutType')
            inputPageTitleEl.value = params.get('pageTitle')

            // create used section into the canvas
            sections.forEach(section => {
                const sortItem = document.createElement('div')

                sortItem.classList.add('sections-name')
                checkIfImageExists(`img/section/${section}.webp`, exists => {
                    if (!exists) {
                        sortItem.parentElement.classList.remove('uk-grid')
                        sortItem.innerHTML = `<img class="missing-preview" src="img/blockit-missing-section.svg" alt="${section}">
                        <span class="uk-label uk-label-danger uk-text-small uk-border-rounded">"${section}" doesn't have a preview image.</span>`
                    } else if(section.includes('component')) {
                        sortItem.innerHTML = `<div class="uk-inline-clip uk-transition-toggle" tabindex="0">
                            <img class="uk-border-rounded" src="img/section/${section}.webp" alt="${section}">
                            <div class="uk-transition-fade uk-position-cover uk-flex uk-flex-center uk-flex-middle">
                                <a href="components.html#${trimTitle(section)}" class="uk-button uk-button-secondary uk-border-rounded" data-uk-toggle><i class="fas fa-wrench fa-sm uk-margin-small-right"></i>Edit ${trimTitle(section)}</a>
                            </div>
                        </div>`
                    } else {
                        sortItem.innerHTML = `<div class="uk-inline-clip uk-transition-toggle" tabindex="0">
                            <img class="uk-border-rounded" src="img/section/${section}.webp" alt="${section}">
                            <div class="uk-transition-fade uk-position-cover uk-flex uk-flex-center uk-flex-middle">
                                <a href="#html-${section}" class="uk-button uk-button-secondary uk-border-rounded" data-uk-toggle><i class="fas fa-code fa-sm uk-margin-small-right"></i>Edit HTML code</a>
                                <div id="html-${section}" class="uk-modal-container uk-flex-top" data-uk-modal>
                                    <div class="uk-modal-dialog uk-modal-body uk-margin-auto-vertical uk-border-rounded blockit-code-editor">
                                        <div id="editor-${section}"></div>
                                        <div class="uk-flex uk-flex-right">
                                            <button class="uk-button uk-button-secondary uk-border-rounded uk-modal-close" type="button">Cancel</button>
                                            <button class="uk-button uk-button-primary uk-border-rounded uk-margin-small-left editor-save-btn" type="button">Save code</button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>`
                    }
                })
                sortableCanvas.appendChild(sortItem)
            })

            savePage()
        }
    }

    // save page function
    function savePage() {
        const savePageBtn = document.getElementById('save-page')
        savePageBtn.addEventListener('click', (e) => {
            e.preventDefault()

            // params page status, true or false
            const addPageStatus = params.get('addPage')

            // sections element
            const sectionEl = sortableCanvas.querySelectorAll('.sections-name')
            const sectionList = Array.from(sectionEl).map(section => section.getElementsByTagName('img')[0].alt)        

            // input form validation
            if(inputPageNameEl.value.length == 0) {
                inputPageNameEl.classList.add('uk-form-danger')
                inputPageNameEl.addEventListener('click', () => inputPageNameEl.classList.remove('uk-form-danger'))
            } else if(inputPageTitleEl.value.length == 0) {
                inputPageTitleEl.classList.add('uk-form-danger')
                inputPageTitleEl.addEventListener('click', () => inputPageTitleEl.classList.remove('uk-form-danger'))
            } else if(sortableCanvas.querySelector('.img-placeholder') !== null) {
                const imgPlaceholder = sortableCanvas.querySelector('.img-placeholder').parentElement
                imgPlaceholder.classList.add('uk-animation-shake')
                setTimeout(() => {
                    imgPlaceholder.classList.remove('uk-animation-shake')
                },500)
            } else {
                // get modified section editor data and send to host
                const sectionArr = sortableCanvas.querySelectorAll('img')
                let sectionData = []
                sectionArr.forEach(el => {
                    const nameFile = el.getAttribute('alt')
                    sectionData.push(JSON.parse(sessionStorage.getItem(nameFile)))
                })
                sectionData = sectionData.filter(section => section !== null)
                
                // send data to host and clear data in storage
                ___browserSync___.socket.emit('saveContentSection', sectionData)
                sectionData.forEach(item => sessionStorage.removeItem(item.blocks[0].id))

                updatePage(addPageStatus, sectionList)
            }
        })
    }

    // update page check condition, add or edit
    function updatePage(status, newSections) {
        const savePageBtn = document.getElementById('save-page')
        const oldName = params.get('pageName')

        if(status == 'true') {
            savePageBtn.innerHTML = '<img class="uk-margin-small-right blockit-spinner" src="img/blockit-spinner.svg" width="16">Loading...'

            setTimeout(() => {
                params.delete('addPage')
                params.append('addPage', 'false')
                params.append('pageName', inputPageNameEl.value.toLowerCase().replace(/ /g,"-"))
                params.append('pageTitle', inputPageTitleEl.value)
                params.append('layoutType', inputPageTypeEl.value)
                params.append('sections', JSON.stringify(newSections))
                location.href = `action-page.html?${params.toString()}`

                // send data page to host            
                ___browserSync___.socket.emit('savePageData', inputPageNameEl.value.toLowerCase().replace(/ /g,"-"), pageFormat(newSections, inputPageTitleEl.value, inputPageTypeEl.value))
            }, 2000)
        } else if(status == 'false') {
            savePageBtn.innerHTML = '<img class="uk-margin-small-right blockit-spinner" src="img/blockit-spinner.svg" width="16">Loading...'

            setTimeout(() => {
                params.delete('pageName')
                params.append('pageName', inputPageNameEl.value.toLowerCase().replace(/ /g,"-"))
                params.delete('pageTitle')
                params.append('pageTitle', inputPageTitleEl.value)
                params.delete('layoutType')
                params.append('layoutType', inputPageTypeEl.value)
                params.delete('sections')
                params.append('sections', JSON.stringify(newSections))
                location.href = `action-page.html?${params.toString()}`

                // send data page to host            
                ___browserSync___.socket.emit('savePageData', inputPageNameEl.value.toLowerCase().replace(/ /g,"-"), pageFormat(newSections, inputPageTitleEl.value, inputPageTypeEl.value))
                if(oldName !== undefined && oldName !== inputPageNameEl.value.toLowerCase().replace(/ /g,"-")) ___browserSync___.socket.emit('deletePageData', oldName)
            }, 2000)
        }
    }

    // check image section preview exist or not
    function checkIfImageExists(url, callback) {
        const img = new Image()
        img.src = url
        
        if (img.complete) {
            callback(true)
        } else {
            img.onload = () => callback(true)
            img.onerror = () => callback(false)
        }
    }

    // remove section in library is already use in current canvas
    function sortUsed() {
        let libraryArr = []
        let currentArr = []

        libraryWrap.querySelectorAll('img').forEach(item => {
            item.closest('.sections-name').removeAttribute('hidden')
            libraryArr.push(item)
        })

        sortableCanvas.querySelectorAll('img').forEach(item => currentArr.push(item.alt))
        libraryArr = libraryArr.filter(val => currentArr.includes(val.alt))
        libraryArr.forEach(item => item.closest('.sections-name').setAttribute('hidden', ''))
    }

    // write each category of section library into the dom
    function sectionLibrary(nameSection, nameWrap, callback) {
        const mainWrap = document.querySelector(nameWrap)
        const sortWrap = mainWrap.querySelector('.sortable-box')

        nameSection.sort((a,b) => a.length - b.length)
        nameSection.forEach(section => {
            const sortItem = document.createElement('div')

            sortItem.classList.add('sections-name')
            sortItem.innerHTML = `<div class="uk-inline-clip uk-transition-toggle" tabindex="0">
                <img class="uk-border-rounded" src="img/section/${section}.webp" alt="${section}">
                <div class="uk-transition-fade uk-position-cover uk-flex uk-flex-center uk-flex-bottom">
                    <span class="uk-text-small" data-uk-toggle>${section}</span>
                </div>
            </div>`

            sortWrap.appendChild(sortItem)
        })

        // deactivate edit html modal when section removed from canvas and back to library
        UIkit.util.on(sortWrap, 'added', () => {
            const deactivateModal = sortWrap.querySelectorAll('.uk-transition-fade')
            deactivateModal.forEach(el =>{
                const sectionName = el.parentElement.querySelector('img').getAttribute('alt')
                el.classList.remove('uk-flex-middle')
                el.classList.add('uk-flex-bottom')
                el.innerHTML = `<span class="uk-text-small" data-uk-toggle>${sectionName}</span>`
            })
        })

        callback()
    }

    // create sections list into the dom function
    function createListSections(sectionsArray, slidesArr) {
        // transfer data array to global variable array
        const rawArr = sectionsArray.filter(item => item.match(/.(hbs)$/i))
        const bufferListArr = rawArr.map(item => item.split('.').slice(0, -1).join('.'))

        // exclusive section category
        const sectionExclusive = bufferListArr.filter(item => item.includes('equity'))
        sectionLibrary(sectionExclusive, '#wrap-exclusive', sortUsed)

        // feature section category
        const sectionFeatures = bufferListArr.filter(item => item.includes('feature'))
        sectionLibrary(sectionFeatures, '#wrap-feature', sortUsed)

        // content section category
        const sectionContents = bufferListArr.filter(item => item.includes('content'))
        sectionLibrary(sectionContents, '#wrap-content', sortUsed)

        // team section category
        const sectionTeams = bufferListArr.filter(item => item.includes('team'))
        sectionLibrary(sectionTeams, '#wrap-team', sortUsed)

        // gallery section category
        const sectionGalleries = bufferListArr.filter(item => item.includes('gallery'))
        sectionLibrary(sectionGalleries, '#wrap-gallery', sortUsed)

        // pricing section category
        const sectionPricings = bufferListArr.filter(item => item.includes('pricing'))
        sectionLibrary(sectionPricings, '#wrap-pricing', sortUsed)

        // timeline section category
        const sectionTimelines = bufferListArr.filter(item => item.includes('timeline'))
        sectionLibrary(sectionTimelines, '#wrap-timeline', sortUsed)

        // testimonial section category
        const sectionTestimonials = bufferListArr.filter(item => item.includes('testimonial'))
        sectionLibrary(sectionTestimonials, '#wrap-testimonial', sortUsed)

        // contact section category
        // const sectionContacts = bufferListArr.filter(item => item.includes('contact'))
        // sectionLibrary(sectionContacts, '#wrap-contact', sortUsed)

        // client logo section category
        const sectionClientLogos = bufferListArr.filter(item => item.includes('client-logo'))
        sectionLibrary(sectionClientLogos, '#wrap-client-logo', sortUsed)

        // card section category
        const sectionCards = bufferListArr.filter(item => item.includes('card'))
        sectionLibrary(sectionCards, '#wrap-card', sortUsed)

        // counter section category
        const sectionCounters = bufferListArr.filter(item => item.includes('counter'))
        sectionLibrary(sectionCounters, '#wrap-counter', sortUsed)

        // faq section category
        const sectionFaqs = bufferListArr.filter(item => item.includes('faq'))
        sectionLibrary(sectionFaqs, '#wrap-faq', sortUsed)

        // slideshow component category
        const compSlideshows = []
        slidesArr.forEach((item, index) => {
            if(item.slides.length !== 0) {
                item.name = `component-slideshow-${index + 1}`
                compSlideshows.push(item.name)
            }
        })
        sectionLibrary(compSlideshows, '#wrap-slideshow', sortUsed)
    }

    // show message on canvas sortable
    function showMessageCanvas() {
        const messageBox = document.createElement('div')
        const messageTag = `
        <img class="img-placeholder uk-align-center uk-margin-remove-bottom" src="img/in-lazy.gif" data-src="img/blockit-page-placeholder.svg" alt="icon" width="182" data-uk-img>
        <h5 class="uk-text-muted uk-margin-remove-top">drag & drop the section library here.</h5>`

        // add message box in drag and drop canvas
        sortableCanvas.removeAttribute('data-uk-sortable')
        sortableCanvas.classList.add('uk-flex', 'uk-flex-center', 'uk-flex-middle')
        messageBox.innerHTML = messageTag
        sortableCanvas.appendChild(messageBox)

        // remove message box when section item library draged
        UIkit.util.on(libraryWrap, 'start', function () {
            sortableCanvas.setAttribute('data-uk-sortable', 'group: sortable-group')
            sortableCanvas.classList.remove('uk-flex', 'uk-flex-center', 'uk-flex-middle')
            messageBox.remove()
        })

        // re add message box in drag and drop canvas when canvas empty
        UIkit.util.on(sortableCanvas, 'removed', function () {
            if(sortableCanvas.children.length ==  0) {
                sortableCanvas.removeAttribute('data-uk-sortable')
                sortableCanvas.classList.add('uk-flex', 'uk-flex-center', 'uk-flex-middle')
                messageBox.innerHTML = messageTag
                sortableCanvas.appendChild(messageBox)
            }
        })
    }

    // list sections function
    function listSection(listName) {
        let resList = ''
        listName.forEach(e => resList += `\n \t{{> ${e} }}`)
        return resList
    }

// pages format string function
function pageFormat(listName, pageTitle, pageType) {
return `---
layout: ${pageType}
title: ${pageTitle}
---

<main>${listSection(listName)}
</main>`
}

    // section html editor
    function sectionEditor(holder, saveBtn, data, nameFile) {
        let sectionData = data
        if(JSON.parse(sessionStorage.getItem(nameFile)) !== null) {
            sectionData = JSON.parse(sessionStorage.getItem(nameFile))
        }
        const editor = new EditorJS({
            holder : holder,
            minHeight: 0,
            data: sectionData,
            tools: {
                code: CodeMirror
            },
            defaultBlock: 'code',
            logLevel: 'ERROR'
        })

        editor.isReady
        .then(() => {
            // run save code editor
            saveBtn(editor, nameFile)

            // clear editor event
            document.addEventListener('click', (e) => { 
                if(e.target.classList.contains('uk-modal-close') || e.target.classList.contains('uk-togglabe-leave')) {
                    const editorWrap = document.querySelector('.codex-editor')
                    if(editorWrap !== null) editorWrap.remove()
                }
            })
        })
        .catch((reason) => {
            console.log(`Editor.js initialization failed because of ${reason}`)
        })
    }

    // save section html editor
    function sectionEditorSave(editor, nameFile) {
        const saveBtn = editor.configuration.holder.nextElementSibling.querySelector('.editor-save-btn')
        const modalWrap = editor.configuration.holder.parentElement.parentElement.getAttribute('id')

        saveBtn.addEventListener('click', (e) => {
            e.preventDefault()

            editor.save().then((data) => {
                const editorWrap = document.querySelector('.codex-editor')

                data.blocks[0].id = nameFile
                delete data.time
                delete data.version
                sessionStorage.setItem(nameFile, JSON.stringify(data))
                UIkit.modal(`#${modalWrap}`).hide()
                if(editorWrap !== null) editorWrap.remove()
            })
        })
    }

    // trim section title function
    function trimTitle(words) {
        const n = words.split("-");
        return n[1];
    }
}


if(document.querySelector('.blockit-posts-action') !== null) {
    // all required elements
    const editorPostEl = document.getElementById('editor-post')
    const pageForm = document.getElementById('page-form')
    const savePostBtn = document.getElementById('save-post')
    const params = new URLSearchParams(window.location.search)

    // form element
    let inputPostTitleEl = document.getElementById('post-title')
    let inputPostAuthorEl = document.getElementById('post-author')
    let inputPostCategoryEl = document.getElementById('post-category')
    let inputPostTagsEl = document.getElementById('post-tags')
    let imagePostFeaturedEl = document.querySelector('.post-image').querySelector('img')
    let inputPostShareEl = document.getElementById('post-share')

    // socket list of all file names in section directory
    document.addEventListener('readystatechange', () => {
        if(document.readyState == 'complete') {
            // read author names data from host
            ___browserSync___.socket.emit('readSettingsData', 'empty')

            // receive settings data for form setting
            ___browserSync___.socket.once('processSettingsData', async settingsObj => {
                const data = await settingsObj.authors

                // run post method
                addPost(data)
                editPost(data)
            })

            // input featured image
            document.addEventListener('change', e => {
                if(e.target.classList.contains('img-post-upload')) featuredImage(e.target)
            })
            
            // delete featured image
            document.addEventListener('click', e => {
                if(e.target.classList.contains('delete-image-btn')) {
                    e.preventDefault()

                    const imageDel = e.target.closest('.uk-width-1-1').querySelector('img')
                    const showInput = e.target.closest('.uk-width-1-1').querySelector('.uk-transition-fade')
                    imageDel.setAttribute('src', 'img/blockit-image-post.svg')
                    e.target.setAttribute('hidden', '')
                    showInput.removeAttribute('hidden')
                }
            })
        }
    })

    // add new post function
    function addPost(authorNames) {
        if(params.get('addPost') == 'true') {
            authorNames.forEach(e => {
                const optionItem = document.createElement('option')
                optionItem.setAttribute('data-id', e.id)
                optionItem.setAttribute('value', e.name)
                optionItem.innerHTML = e.name
                inputPostAuthorEl.appendChild(optionItem)
            })
            inputPostShareEl.checked = true

            window.addEventListener('keydown', (e) => {
                if(e.keyIdentifier=='U+000A' || e.keyIdentifier=='Enter' || e.keyCode==13) {
                    if(e.target.nodeName=='INPUT' && e.target.type=='text') {
                        e.preventDefault()
                        return false
                    }
                }
            },true)

            postEditor(editorPostEl, savePost, authorNames)
        }
    }

    // edit post function
    function editPost(authorNames) {
        if(params.get('addPost') == 'false') {
            authorNames.forEach(e => {
                const optionItem = document.createElement('option')
                optionItem.setAttribute('data-id', e.id)
                optionItem.setAttribute('value', e.name)
                optionItem.innerHTML = e.name
                inputPostAuthorEl.appendChild(optionItem)
            })

            // fill data value to post info input element
            inputPostTitleEl.value = params.get('postTitle')
            inputPostAuthorEl.value = params.get('postAuthor')
            inputPostCategoryEl.value = params.get('postCategory')
            inputPostTagsEl.value = params.get('postTags').replace(/,/g, ', ')
            imagePostFeaturedEl.setAttribute('src', `${params.get('postImage') === 'false' ? 'img/blockit-image-post.svg' : `../${params.get('postImage')}`}`)
            inputPostShareEl.checked = params.get('postShare') == 'true' ? true : false

            showImageDelete(imagePostFeaturedEl)

            postEditor(editorPostEl, savePost, authorNames, params.get('postContent'))
        }
    }

    // save post function
    function savePost(editor) {
        savePostBtn.addEventListener('click', (e) => {
            e.preventDefault()

            // params post status, true or false
            const addPostStatus = params.get('addPost')

            // input form validation
            if(inputPostTitleEl.value.length == 0) {
                inputPostTitleEl.classList.add('uk-animation-shake')
                setTimeout(() => {
                    inputPostTitleEl.classList.remove('uk-animation-shake')
                },500)
            } else if(inputPostAuthorEl.value == 0) {
                inputPostAuthorEl.classList.add('uk-form-danger')
                inputPostAuthorEl.addEventListener('click', () => inputPostAuthorEl.classList.remove('uk-form-danger'))
            } else if(inputPostCategoryEl.value.length == 0) {
                inputPostCategoryEl.classList.add('uk-form-danger')
                inputPostCategoryEl.addEventListener('click', () => inputPostCategoryEl.classList.remove('uk-form-danger'))
            } else {
                updatePost(addPostStatus, editor, tagFormat)
            }
        })
    }

    // post editorjs init
    function postEditor(holder, saveBtn, authorNames, data) {
        let postData = ''
        if(data !== undefined) {
            postData = JSON.parse(data)
        }
        const editor = new EditorJS({
            holder : holder,
            minHeight: 610,
            placeholder: 'Then write your an awesome story!',
            data: postData,
            authorData: authorNames,
            tools: {
                header: {
                    class: Header,
                    inlineToolbar: ['link'],
                    config: {
                        placeholder: 'Header',
                        levels: [3, 4, 5],
                    }
                },
                image: {
                    class: ImageTool,
                    config: {
                        uploader: {
                            async uploadByFile(buffer, nameFile) {
                                let typeFile = '';
                                switch(buffer.type) {
                                    case 'image/jpeg':
                                        typeFile = 'jpg'
                                        break
                                    case 'image/png':
                                        typeFile = 'png'
                                        break
                                    case 'image/gif':
                                        typeFile = 'gif'
                                        break
                                    case 'image/svg+xml':
                                        typeFile = 'svg'
                                        break
                                }

                                nameFile = `image-${Math.random().toString(36).slice(2)}.${typeFile}`
                                ___browserSync___.socket.emit('editorJsUpload', buffer, nameFile)

                                const dataUrl = await fetchRetry(`http://localhost:3000/img/user/${nameFile}`).then(response => response)
                                const imageUrl = dataUrl.replace (/^[a-z]{4,5}\:\/{2}[a-z]{1,}\:[0-9]{1,4}.(.*)/, '$1')

                                return {
                                    success: 1,
                                    file: {
                                        url: `../${imageUrl}`
                                    }
                                }
                            }
                        }
                    }
                },
                list: {
                    class: List,
                    inlineToolbar: true
                },
                quote: {
                    class: Quote,
                    inlineToolbar: false,
                    config: {
                        quotePlaceholder: 'Enter a quote',
                        captionPlaceholder: 'Quote\'s author',
                    },
                },
                delimiter: Delimiter,
                table: {
                    class: Table,
                }
            },
            logLevel: 'ERROR'
        })

        editor.isReady
        .then(() => {
            // run save code editor
            saveBtn(editor)
        })
        .catch((reason) => {
            console.log(`Editor.js initialization failed because of ${reason}`)
        })
    }

    // retry fetch image if fail
    function fetchRetry(path) {
        return fetch(path)
        .then(response => {
            if (response.ok) {
                return response.url
            } else if (response.status === 404) {
                return fetchRetry(path)
            }
        })
        .catch(console.warn('image not found! fetch retry... please wait.'))
    }

    // update post check condition, add or edit
    function updatePost(status, newContent, tagFormat) {
        if(status == 'true') {
            savePostBtn.innerHTML = '<img class="uk-margin-small-right blockit-spinner" src="img/blockit-spinner.svg" width="16">Loading...'

            setTimeout(() => {
                newContent.save().then((data) => {
                    const postProp = {
                        title: inputPostTitleEl.value,
                        link: `${trimLongTitle(inputPostTitleEl.value)}.html`,
                        author: {
                            id: inputPostAuthorEl.querySelector('option:checked').getAttribute('data-id'),
                            name: inputPostAuthorEl.value,
                            avatar: findAvatar(newContent)
                        },
                        category: inputPostCategoryEl.value,
                        tags: inputPostTagsEl.value.replace(/\s/g, '').split(','),
                        image: checkImageValue(imagePostFeaturedEl),
                        share: inputPostShareEl.checked ? true : false
                    }
                    const nameFile = trimLongTitle(postProp.title)
                    Object.assign(postProp, data)

                    // date time conversion
                    let date = new Date(postProp.time)
                    let year = new Intl.DateTimeFormat('en', { year: 'numeric' }).format(date)
                    let month = new Intl.DateTimeFormat('en', { month: 'long' }).format(date)
                    let day = new Intl.DateTimeFormat('en', { day: '2-digit' }).format(date)
                    postProp.date = `${month} ${day}, ${year}`

                    // delete unused property
                    delete postProp.version

                    // empty text content validation
                    if(postProp.blocks.length == 0) {
                        const emptyText = document.querySelector('.ce-paragraph')
                        emptyText.classList.add('uk-animation-shake')
                        setTimeout(() => {
                            emptyText.classList.remove('uk-animation-shake')
                        },500)
                        savePostBtn.innerHTML = '<i class="fas fa-save fa-sm uk-margin-small-right"></i>Save post'
                    } else {
                        // params update data
                        params.delete('addPost')
                        params.append('addPost', 'false')
                        params.append('postTitle', inputPostTitleEl.value)
                        params.append('postAuthor', inputPostAuthorEl.value)
                        params.append('postCategory', inputPostCategoryEl.value)
                        params.append('postTags', inputPostTagsEl.value)
                        params.append('postImage', imagePostFeaturedEl.getAttribute('src') === 'img/blockit-image-post.svg' ? false : String(imagePostFeaturedEl.getAttribute('src').replace("http://localhost:3000/", "")))
                        params.append('postShare', inputPostShareEl.checked ? true : false)
                        params.append('postContent', JSON.stringify(data))

                        // send post content data
                        ___browserSync___.socket.emit('savePostContent', nameFile, postProp, tagFormat())
                        location.href = `action-post.html?${params.toString()}`
                    }
                })
                .catch(error => console.error('Saving failed: ', error))
            }, 1500)
        } else if(status == 'false') {
            const oldRawTitle = params.get('postTitle')
            const oldTitle = trimLongTitle(oldRawTitle)

            savePostBtn.innerHTML = '<img class="uk-margin-small-right blockit-spinner" src="img/blockit-spinner.svg" width="16">Loading...'

            setTimeout(() => {
                newContent.save().then((data) => {
                    const postProp = {
                        title: inputPostTitleEl.value,
                        link: `${trimLongTitle(inputPostTitleEl.value)}.html`,
                        author: {
                            id: inputPostAuthorEl.querySelector('option:checked').getAttribute('data-id'),
                            name: inputPostAuthorEl.value,
                            avatar: findAvatar(newContent)
                        },
                        category: inputPostCategoryEl.value,
                        tags: inputPostTagsEl.value.replace(/\s/g, '').split(','),
                        image: checkImageValue(imagePostFeaturedEl),
                        share: inputPostShareEl.checked ? true : false
                    }
                    const nameFile = trimLongTitle(postProp.title)
                    Object.assign(postProp, data)

                    // date time conversion
                    let date = new Date(postProp.time)
                    let year = new Intl.DateTimeFormat('en', { year: 'numeric' }).format(date)
                    let month = new Intl.DateTimeFormat('en', { month: 'long' }).format(date)
                    let day = new Intl.DateTimeFormat('en', { day: '2-digit' }).format(date)
                    postProp.date = `${month} ${day}, ${year}`

                    // delete unused property
                    delete postProp.version

                    // params update data
                    params.delete('postTitle')
                    params.append('postTitle', inputPostTitleEl.value)
                    params.delete('postAuthor')
                    params.append('postAuthor', inputPostAuthorEl.value)
                    params.delete('postCategory')
                    params.append('postCategory', inputPostCategoryEl.value)
                    params.delete('postTags')
                    params.append('postTags', inputPostTagsEl.value)
                    params.delete('postImage'),
                    params.append('postImage', imagePostFeaturedEl.getAttribute('src') === 'img/blockit-image-post.svg' ? false : String(imagePostFeaturedEl.getAttribute('src').replace("http://localhost:3000/", "")))                
                    params.delete('postShare')
                    params.append('postShare', inputPostShareEl.checked ? true : false)
                    params.delete('postContent')
                    params.append('postContent', JSON.stringify(data))

                    // send post content data
                    ___browserSync___.socket.emit('savePostContent', nameFile, postProp, tagFormat())

                    // rename title condition
                    if(oldRawTitle !== undefined && oldRawTitle !== inputPostTitleEl.value) ___browserSync___.socket.emit('deletePostData', oldTitle, tagFormat())

                    location.href = `action-post.html?${params.toString()}`
                })
                .catch(error => console.error('Saving failed: ', error))
            }, 1500)
        }
    }

    // trim long post title function
    function trimLongTitle(string) {
        const rawString = string.toLowerCase()
        const trimmedString = rawString.replace(/^(.{50}[^\s]*).*/, "$1").replace(/ /g,"-").replace(/[^a-zA-Z0-9_-]/g,'')

        return trimmedString
    }

    // find avatar image in updatePost method
    function findAvatar(newContent) {
        let avatar = ''
        newContent.configuration.authorData.forEach((e) => {
            if (e.name == inputPostAuthorEl.value) avatar = e.avatar
        })
        return avatar
    }

    // upload featured image function
    function featuredImage(input) {
        const featuredEl = input.closest('.post-image').querySelector('img')
        const buffer = input.files[0]
        const reader = new FileReader()
        let typeFile = ''
        switch(buffer.type) {
            case 'image/jpeg':
                typeFile = 'jpg'
                break
            case 'image/png':
                typeFile = 'png'
                break
            case 'image/gif':
                typeFile = 'gif'
                break
            case 'image/svg+xml':
                typeFile = 'svg'
                break
        }
        const nameFile = `image-post-${Math.random().toString(36).slice(2)}.${typeFile}`

        reader.readAsArrayBuffer(buffer)
        reader.onload = async () => {
            featuredEl.removeAttribute('src')
            featuredEl.setAttribute('width', '32')
            featuredEl.setAttribute('src', 'img/blockit-spinner-2.svg')

            ___browserSync___.socket.emit('assetsProcess', buffer, nameFile)
            ___browserSync___.socket.once('assetsDone', path => {
                featuredEl.removeAttribute('width')
                featuredEl.removeAttribute('src')
                featuredEl.setAttribute('src', path)

                showImageDelete(imagePostFeaturedEl)
            })
        }
        reader.onerror = () => console.log(reader.error)
    }

    // check feature image value function
    function checkImageValue(element) {
        let value = ''
        if(element.getAttribute('src') === 'img/blockit-image-post.svg') {
            value = false
        } else {
            value = element.getAttribute('src').includes('../') ? String(element.getAttribute('src').substr(3)) : String(element.getAttribute('src').replace("http://localhost:3000/", ""))
            value = removeParam('browsersync', value)
        }
        return value
    }

    // featured image delete button
    function showImageDelete(element) {
        if(element.getAttribute('src') !== 'img/blockit-image-post.svg') {
            const btnDel = element.closest('.uk-form-controls').previousElementSibling.querySelector('button')
            const inputImage = element.nextElementSibling

            btnDel.removeAttribute('hidden')
            inputImage.setAttribute('hidden', '')
        }
    }

    // remove unused parameter in url
    function removeParam(key, sourceURL) {
        let rtn = sourceURL.split("?")[0],
            param,
            params_arr = [],
            queryString = (sourceURL.indexOf("?") !== -1) ? sourceURL.split("?")[1] : "";
        if (queryString !== "") {
            params_arr = queryString.split("&");
            for (let i = params_arr.length - 1; i >= 0; i -= 1) {
                param = params_arr[i].split("=")[0];
                if (param === key) {
                    params_arr.splice(i, 1);
                }
            }
            if (params_arr.length) rtn = rtn + "?" + params_arr.join("&");
        }
        return rtn;
    }

    // show success notification function
    // function showNotif(message) {
    //     const notifWrap = document.createElement('div')
    //     notifWrap.classList.add('uk-alert-primary', 'uk-border-rounded', 'uk-text-center', 'uk-width-1-1', 'uk-margin-bottom', 'uk-animation-slide-top-small')
    //     notifWrap.setAttribute('data-uk-alert', 'duration: 1200')
    //     notifWrap.innerText = message
    //     pageForm.insertBefore(notifWrap, pageForm.firstChild)
    //     setTimeout(function() { 
    //         notifWrap.remove()
    //     }, 3200)
    // }
}

if(document.querySelector('.blockit-components') !== null) {
    // contact varibales
    const contactEmailEl = document.getElementById('contact-email-form')
    const contactPhoneEl = document.getElementById('contact-phone-form')
    const contactAddressEl = document.getElementById('contact-address-form')
    const contactMapEl = document.getElementById('contact-map-form')
    const contactHeadingEl = document.getElementById('contact-heading-form')

    // back to last settings tab when page refresh
    lastSettingsTab()

    document.addEventListener('readystatechange', () => {
        if(document.readyState == 'complete') {
            // send trigger to host
            ___browserSync___.socket.emit('readComponentsData', 'empty')

            // receive components data for form setting
            ___browserSync___.socket.once('processComponentsData', async componentsObj => {
                const data = await componentsObj

                slideshowForm(data)
                contactForm(data)
            })

            // input slide image
            document.addEventListener('change', e => {
                if(e.target.classList.contains('img-slide-upload')) changeSlide(e.target)
            })

            // save all components configuration
            saveComponents()
        }
    })

    // save settings function
    function saveComponents() {
        const saveComponentsBtn = document.getElementById('save-components')
        const savedData = {}
        saveComponentsBtn.addEventListener('click',() => {
            saveComponentsBtn.innerHTML = '<img class="uk-margin-small-right blockit-spinner" src="img/blockit-spinner.svg" width="16">Loading...'

            savedData.slideshows = componentSlideshows()
            savedData.contact = componentContact()

            // send settings data to host
            ___browserSync___.socket.emit('sendComponentsData', savedData)

            setTimeout(() => {
                saveComponentsBtn.innerHTML = '<i class="fas fa-save fa-sm uk-margin-small-right"></i>Save components'
                showNotif('<i class="fas fa-exclamation-circle"></i> Components successfully saved')
            }, 1500)
        })
    }

    // slideshows save function
    function componentSlideshows() {
        let index = 0
        const slideshows = []

        while (index < 4) {
            const slideshowsForm = document.querySelector(`.slide-group-${index + 1}`).querySelectorAll('.slide-form')
            const slideObj = {
                backgroundImage: 'optional',
                slides: []
            }

            slideshowsForm.forEach(slide => {
                const radioSlideStock = slide.querySelectorAll('input[name="component-slide-stock-radio"]')
                const inputSlideNotif = slide.querySelector('.component-slide-notification')
                const inputSlideHeading = slide.querySelector('.component-slide-heading')
                const inputSlideText = slide.querySelector('.component-slide-text')
                const inputSlideImage = slide.querySelector('.component-slide').querySelector('img')
                const inputSlideSymbol = slide.querySelectorAll('.component-slide-stock-symbol')
                const slideSymbolLogo = slide.querySelectorAll('img[alt="stockprice-logo"]')
                const slideImageSrc = removeParam('browsersync', inputSlideImage.getAttribute('src').includes('../') ? inputSlideImage.getAttribute('src').substr(3) : inputSlideImage.getAttribute('src').replace("http://localhost:3000/", ""))

                slideObj.slides.push(
                    {
                        notification: {
                            enabled: inputSlideNotif.value.length !== 0 ? true : false,
                            text: inputSlideNotif.value
                        },
                        heading: inputSlideHeading.value,
                        text: inputSlideText.value,
                        slideImage: slideImageSrc,
                        stockPrice: {
                            enabled: radioSlideStock[0].checked ? true : false,
                            stock: [
                                {
                                    symbol: inputSlideSymbol[0].value.length !== 0 ? inputSlideSymbol[0].value : false,
                                    logo: removeParam('browsersync', slideSymbolLogo[0].getAttribute('src').includes('../') ? slideSymbolLogo[0].getAttribute('src').substr(3) : slideSymbolLogo[0].getAttribute('src').replace("http://localhost:3000/", ""))
                                },
                                {
                                    symbol: inputSlideSymbol[1].value.length !== 0 ? inputSlideSymbol[1].value : false,
                                    logo: removeParam('browsersync', slideSymbolLogo[1].getAttribute('src').includes('../') ? slideSymbolLogo[1].getAttribute('src').substr(3) : slideSymbolLogo[1].getAttribute('src').replace("http://localhost:3000/", ""))
                                },
                                {
                                    symbol: inputSlideSymbol[2].value.length !== 0 ? inputSlideSymbol[2].value : false,
                                    logo: removeParam('browsersync', slideSymbolLogo[2].getAttribute('src').includes('../') ? slideSymbolLogo[2].getAttribute('src').substr(3) : slideSymbolLogo[2].getAttribute('src').replace("http://localhost:3000/", ""))
                                }
                            ]
                        }
                    }
                )
            })
            slideshows.push(slideObj)
            index++
        }

        return slideshows
    }

    // slideshow html dom function
    function slideshowForm(data) {
        const slideshowData = data.slideshows
        const slideGroupNav = document.querySelector('.slide-group-nav')
        const slideGroupContent = document.querySelector('.slide-group-content')
        const placeholderTag = `
        <div class="uk-text-center">
            <img class="missing-list-placeholder uk-margin-remove-bottom" src="http://localhost:3000/blockit/img/blockit-missing-slide.svg" data-src="img/blockit-missing-slide.svg" alt="icon" width="224" data-uk-img="">
            <h5 class="uk-text-muted uk-margin-remove-top uk-margin-large-bottom">oops!, there is no slide here<br>click "add new slide" to create.</h5>
        </div>
        <hr>
        <div class="uk-width-1-1 uk-flex uk-flex-right uk-margin-small-bottom">
            <button class="add-slide uk-button uk-button-secondary uk-border-rounded"><i class="fas fa-plus-circle fa-sm uk-margin-small-right"></i>Add new slide</button>
        </div>`

        slideshowData.forEach((slideshow, index) => {
            const groupNavLi = document.createElement('li')
            const groupContentLi = document.createElement('li')
            const breakLine = document.createElement('hr')
            const newSlideBtn = document.createElement('div')

            groupNavLi.innerHTML = `<a href="#">Group ${index + 1}</a>`
            slideGroupNav.appendChild(groupNavLi)

            groupContentLi.classList.add(`slide-group-${index + 1}`)
            slideGroupContent.appendChild(groupContentLi)

            newSlideBtn.classList.add('uk-width-1-1', 'uk-flex', 'uk-flex-right', 'uk-margin-small-bottom')
            newSlideBtn.innerHTML = `<button class="add-slide uk-button uk-button-secondary uk-border-rounded"><i class="fas fa-plus-circle fa-sm uk-margin-small-right"></i>Add new slide</button>`

            // slideshow set content
            slideshow.slides.forEach(slide => {
                const slideForm = document.createElement('form')
                slideForm.classList.add('uk-form-stacked', 'uk-grid-small', 'uk-margin-large', 'slide-form')
                slideForm.setAttribute('data-uk-grid', '')
                slideForm.innerHTML = `
                <div class="uk-width-1-2">
                    <div class="uk-margin">
                        <label class="uk-form-label" for="component-slide-notification">Notification text <i class="fas fa-info-circle fa-xs" data-uk-tooltip="title: Leave blank if you don't want use; pos: right"></i></label>
                        <div class="uk-form-controls">
                            <input class="uk-input uk-border-rounded component-slide-notification" type="text">
                        </div>
                    </div>
                    <div class="uk-margin">
                        <label class="uk-form-label" for="component-slide-heading">Heading text</label>
                        <div class="uk-form-controls">
                            <input class="uk-input uk-border-rounded component-slide-heading" type="text">
                        </div>
                    </div>
                    <div class="uk-margin">
                        <label class="uk-form-label" for="component-slide-text">Slide text</label>
                        <div class="uk-form-controls">
                            <textarea class="uk-textarea uk-border-rounded component-slide-text" rows="3">${slide.text}</textarea>
                        </div>
                    </div>
                    <div class="uk-margin">
                        <label class="uk-form-label" for="component-slide-stock-radio">Stock price</label>
                        <div class="uk-form-controls uk-form-controls-text">
                            <label class="uk-margin-right"><input class="uk-radio" type="radio" value="enable" name="component-slide-stock-radio"> Enable</label>
                            <label><input class="uk-radio" type="radio" value="disable" name="component-slide-stock-radio"> Disable</label>
                        </div>
                    </div>
                    <div class="uk-margin">
                        <div class="uk-form-stacked uk-grid-small uk-grid" data-uk-grid>
                            <div class="uk-width-1-3 uk-flex uk-flex-middle" data-uk-form-custom>
                                <div class="uk-inline-clip uk-transition-toggle component-slide-stock-logo" tabindex="0">
                                    <img src="../img/in-lazy.gif" alt="stockprice-logo">
                                    <div class="uk-transition-fade uk-position-cover uk-flex uk-flex-center uk-flex-middle">
                                        <input class="img-stocklogo-upload" type="file">
                                        <button class="uk-button fas fa-camera uk-label uk-border-pill" type="button" tabindex="-1"></button>
                                    </div>
                                </div>
                                <input class="uk-input uk-border-rounded component-slide-stock-symbol" type="text">
                            </div>
                            <div class="uk-width-1-3 uk-flex uk-flex-middle" data-uk-form-custom>
                                <div class="uk-inline-clip uk-transition-toggle component-slide-stock-logo" tabindex="0">
                                    <img src="../img/in-lazy.gif" alt="stockprice-logo">
                                    <div class="uk-transition-fade uk-position-cover uk-flex uk-flex-center uk-flex-middle">
                                        <input class="img-stocklogo-upload" type="file">
                                        <button class="uk-button fas fa-camera uk-label uk-border-pill" type="button" tabindex="-1"></button>
                                    </div>
                                </div>
                                <input class="uk-input uk-border-rounded component-slide-stock-symbol" type="text">
                            </div>
                            <div class="uk-width-1-3 uk-flex uk-flex-middle" data-uk-form-custom>
                                <div class="uk-inline-clip uk-transition-toggle component-slide-stock-logo" tabindex="0">
                                    <img src="../img/in-lazy.gif" alt="stockprice-logo">
                                    <div class="uk-transition-fade uk-position-cover uk-flex uk-flex-center uk-flex-middle">
                                        <input class="img-stocklogo-upload" type="file">
                                        <button class="uk-button fas fa-camera uk-label uk-border-pill" type="button" tabindex="-1"></button>
                                    </div>
                                </div>
                                <input class="uk-input uk-border-rounded component-slide-stock-symbol" type="text">
                            </div>
                        </div>
                    </div>
                </div>
                <div class="uk-width-1-2">
                    <div class="uk-margin">
                        <label class="uk-form-label" for="form-author-avatar">Slide image <i class="fas fa-info-circle fa-xs" data-uk-tooltip="title: Use 652 x 746 px image size; pos: right"></i><button class="delete-slide-btn uk-button fas fa-trash-alt uk-label uk-border-pill uk-float-right"></button></label>
                        <div class="uk-form-controls uk-margin-small-bottom">
                            <div class="uk-width-1-1" data-uk-form-custom>
                                <div class="uk-inline-clip uk-transition-toggle component-slide" tabindex="0">
                                    <img src="../${slide.slideImage}" alt="slide-image">
                                    <div class="uk-transition-fade uk-position-cover uk-flex uk-flex-center uk-flex-middle">
                                        <input class="img-slide-upload" type="file">
                                        <button class="uk-button uk-button-secondary uk-border-rounded" type="button" tabindex="-1"><i class="fas fa-upload fa-sm uk-margin-small-right"></i>Upload image</button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                `

                slideForm.querySelectorAll('input[name="component-slide-stock-radio"]').forEach(radio => {
                    if (slide.stockPrice.enabled == true && radio.getAttribute('value') == 'enable') {
                        radio.checked = true
                    } else if (slide.stockPrice.enabled == false && radio.getAttribute('value') == 'disable') {
                        radio.checked = true
                    }
                })
                slideForm.querySelector('input.component-slide-notification').value = slide.notification.text
                slideForm.querySelector('input.component-slide-heading').value = slide.heading
                slideForm.querySelectorAll('img[alt="stockprice-logo"]').forEach((logo, index) => {
                    logo.setAttribute('src', `../${slide.stockPrice.stock[index].logo}`)
                })
                slideForm.querySelectorAll('.component-slide-stock-symbol').forEach((symbol, index) => {
                    symbol.value = slide.stockPrice.stock[index].symbol == false ? '' : slide.stockPrice.stock[index].symbol
                })

                groupContentLi.appendChild(slideForm)
            })

            groupContentLi.appendChild(breakLine)
            groupContentLi.appendChild(newSlideBtn)

            // condition when empty slide 
            if(groupContentLi.children.length == 2) {
                groupContentLi.innerHTML = placeholderTag
            }
        })

        // add slide button
        document.addEventListener('click', e => {
            if(e.target.classList.contains('add-slide')) {
                const slideWrap = e.target.parentElement.parentElement
                const addSlideForm = document.createElement('form')

                if(slideWrap.children[0].classList.contains('uk-text-center')) {
                    slideWrap.children[0].remove()
                }

                addSlideForm.classList.add('uk-form-stacked', 'uk-grid-small', 'uk-margin-large', 'slide-form')
                addSlideForm.setAttribute('data-uk-grid', '')    
                addSlideForm.innerHTML = `
                <div class="uk-width-1-2">
                    <div class="uk-margin">
                        <label class="uk-form-label" for="component-slide-notif-text">Notification text <i class="fas fa-info-circle fa-xs" data-uk-tooltip="title: Leave blank if you don't want use; pos: right"></i></label>
                        <div class="uk-form-controls">
                            <input class="uk-input uk-border-rounded component-slide-notif-text" type="text">
                        </div>
                    </div>
                    <div class="uk-margin">
                        <label class="uk-form-label" for="component-slide-heading">Heading text</label>
                        <div class="uk-form-controls">
                            <input class="uk-input uk-border-rounded component-slide-heading" type="text">
                        </div>
                    </div>
                    <div class="uk-margin">
                        <label class="uk-form-label" for="component-slide-text">Slide text</label>
                        <div class="uk-form-controls">
                            <textarea class="uk-textarea uk-border-rounded component-slide-text" rows="3"></textarea>
                        </div>
                    </div>
                    <div class="uk-margin">
                        <label class="uk-form-label" for="component-slide-stock-radio">Stock price</label>
                        <div class="uk-form-controls uk-form-controls-text">
                            <label class="uk-margin-right"><input class="uk-radio" type="radio" value="enable" name="component-slide-stock-radio" checked> Enable</label>
                            <label><input class="uk-radio" type="radio" value="disable" name="component-slide-stock-radio"> Disable</label>
                        </div>
                    </div>
                    <div class="uk-margin">
                        <div class="uk-form-stacked uk-grid-small uk-grid" data-uk-grid>
                            <div class="uk-width-1-3 uk-flex uk-flex-middle" data-uk-form-custom>
                                <div class="uk-inline-clip uk-transition-toggle component-slide-stock-logo" tabindex="0">
                                    <img src="img/blockit-symbol-logo.svg" alt="stockprice-logo">
                                    <div class="uk-transition-fade uk-position-cover uk-flex uk-flex-center uk-flex-middle">
                                        <input class="img-stocklogo-upload" type="file">
                                        <button class="uk-button fas fa-camera uk-label uk-border-pill" type="button" tabindex="-1"></button>
                                    </div>
                                </div>
                                <input class="uk-input uk-border-rounded component-slide-stock-symbol" type="text">
                            </div>
                            <div class="uk-width-1-3 uk-flex uk-flex-middle" data-uk-form-custom>
                                <div class="uk-inline-clip uk-transition-toggle component-slide-stock-logo" tabindex="0">
                                    <img src="img/blockit-symbol-logo.svg" alt="stockprice-logo">
                                    <div class="uk-transition-fade uk-position-cover uk-flex uk-flex-center uk-flex-middle">
                                        <input class="img-stocklogo-upload" type="file">
                                        <button class="uk-button fas fa-camera uk-label uk-border-pill" type="button" tabindex="-1"></button>
                                    </div>
                                </div>
                                <input class="uk-input uk-border-rounded component-slide-stock-symbol" type="text">
                            </div>
                            <div class="uk-width-1-3 uk-flex uk-flex-middle" data-uk-form-custom>
                                <div class="uk-inline-clip uk-transition-toggle component-slide-stock-logo" tabindex="0">
                                    <img src="img/blockit-symbol-logo.svg" alt="stockprice-logo">
                                    <div class="uk-transition-fade uk-position-cover uk-flex uk-flex-center uk-flex-middle">
                                        <input class="img-stocklogo-upload" type="file">
                                        <button class="uk-button fas fa-camera uk-label uk-border-pill" type="button" tabindex="-1"></button>
                                    </div>
                                </div>
                                <input class="uk-input uk-border-rounded component-slide-stock-symbol" type="text">
                            </div>
                        </div>
                    </div>
                </div>
                <div class="uk-width-1-2">
                    <div class="uk-margin">
                        <label class="uk-form-label" for="form-author-avatar">Slide image <i class="fas fa-info-circle fa-xs" data-uk-tooltip="title: Use 652 x 746 px image size; pos: right"></i><button class="delete-slide-btn uk-button fas fa-trash-alt uk-label uk-border-pill uk-float-right"></button></label>
                        <div class="uk-form-controls uk-margin-small-bottom">
                            <div class="uk-width-1-1" data-uk-form-custom>
                                <div class="uk-inline-clip uk-transition-toggle component-slide" tabindex="0">
                                    <img src="img/in-lazy.gif" alt="slide-image">
                                    <div class="uk-transition-fade uk-position-cover uk-flex uk-flex-center uk-flex-middle">
                                        <input class="img-slide-upload" type="file">
                                        <button class="uk-button uk-button-secondary uk-border-rounded" type="button" tabindex="-1"><i class="fas fa-upload fa-sm uk-margin-small-right"></i>Upload image</button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                `

                slideWrap.insertBefore(addSlideForm, slideWrap.lastChild.previousElementSibling)
            }
        })

        // delete slide btn
        document.addEventListener('click', (e) => {
            if(e.target.classList.contains('delete-slide-btn')) {
                const parentEl = e.target.closest('.uk-form-stacked')
                e.preventDefault()

                // condition when empty slide 
                if(e.target.closest('.uk-active').children.length == 3) e.target.closest('.uk-active').innerHTML = placeholderTag
                parentEl.remove()
            }
        })
    }

    // contact save function
    function componentContact() {
        const mapTag = document.createElement('div')
        mapTag.innerHTML = contactMapEl.value

        const contact = {
            address: {
                title: contactAddressEl.querySelectorAll('.uk-input')[0].value,
                text: contactAddressEl.querySelectorAll('.uk-input')[1].value
            },
            email: {
                title: contactEmailEl.querySelectorAll('.uk-input')[0].value,
                address: contactEmailEl.querySelectorAll('.uk-input')[1].value, 
                text: contactEmailEl.querySelectorAll('.uk-input')[2].value
            },
            phone: {
                title: contactPhoneEl.querySelectorAll('.uk-input')[0].value,
                number: contactPhoneEl.querySelectorAll('.uk-input')[1].value, 
                text: contactPhoneEl.querySelectorAll('.uk-input')[2].value
            },
            heading: {
                text1: contactHeadingEl.querySelectorAll('.uk-input')[0].value,
                text2: contactHeadingEl.querySelectorAll('.uk-input')[1].value
            },
            mapIframe: contactMapEl.value,
            mapSrc: mapTag.children[0].getAttribute('src')
        }
        return contact
    }

    // contact html dom function
    function contactForm(data) {
        const contactData = data.contact
        
        contactAddressEl.querySelectorAll('.uk-input')[0].value = contactData.address.title
        contactAddressEl.querySelectorAll('.uk-input')[1].value = contactData.address.text
        contactEmailEl.querySelectorAll('.uk-input')[0].value = contactData.email.title
        contactEmailEl.querySelectorAll('.uk-input')[1].value = contactData.email.address
        contactEmailEl.querySelectorAll('.uk-input')[2].value = contactData.email.text
        contactPhoneEl.querySelectorAll('.uk-input')[0].value = contactData.phone.title
        contactPhoneEl.querySelectorAll('.uk-input')[1].value = contactData.phone.number
        contactPhoneEl.querySelectorAll('.uk-input')[2].value = contactData.phone.text
        contactHeadingEl.querySelectorAll('.uk-input')[0].value = contactData.heading.text1
        contactHeadingEl.querySelectorAll('.uk-input')[1].value = contactData.heading.text2
        contactMapEl.innerText = contactData.mapIframe
    }

    // upload slide image function
    function changeSlide(input) {
        const slideEl = input.closest('.component-slide').querySelector('img')
        console.log(slideEl)
        const buffer = input.files[0]
        const reader = new FileReader()
        let typeFile = ''
        switch(buffer.type) {
            case 'image/jpeg':
                typeFile = 'jpg'
                break
            case 'image/png':
                typeFile = 'png'
                break
            case 'image/gif':
                typeFile = 'gif'
                break
            case 'image/svg+xml':
                typeFile = 'svg'
                break
        }
        const nameFile = `slide-${Math.random().toString(36).slice(2)}.${typeFile}`

        reader.readAsArrayBuffer(buffer)
        reader.onload = async () => {
            slideEl.removeAttribute('src')
            slideEl.setAttribute('width', '48')
            slideEl.setAttribute('src', 'img/blockit-spinner-2.svg')

            ___browserSync___.socket.emit('assetsProcess', buffer, nameFile)
            ___browserSync___.socket.once('assetsDone', path => {
                slideEl.removeAttribute('width')
                slideEl.removeAttribute('src')
                slideEl.setAttribute('src', path)
            })
        }
        reader.onerror = () => console.log(reader.error)
    }

    // stick to current tab when page refresh
    function lastSettingsTab() {
        const ukTabEl = document.querySelector('.uk-tab-left')
        const ukTabList = ukTabEl.querySelectorAll('li')
        const ukTabContent = document.querySelector('#component-tab-left')
        const ukTabContentList = ukTabContent.querySelectorAll('li')
        const hash = location.hash.substr(1)

        ukTabList.forEach(list => {
            list.addEventListener('click', e => window.location.hash = e.target.getAttribute('href').substr(1))
            list.classList.remove('uk-active')
            if(list.children[0].getAttribute('href').substr(1) == hash) {
                list.classList.add('uk-active')
            }
        })
        ukTabContentList.forEach(list => {
            list.classList.remove('uk-active')
            if(list.classList.value == hash) {
                list.classList.add('uk-active')
            }
        })

        if(performance.navigation.type == performance.navigation.TYPE_RELOAD) {
            ukTabList.forEach(list => {
                list.classList.remove('uk-active')
                if(list.children[0].getAttribute('href').substr(1) == hash) {
                    list.classList.add('uk-active')
                }
            })
            ukTabContentList.forEach(list => {
                list.classList.remove('uk-active')
                if(list.classList.value == hash) {
                    list.classList.add('uk-active')
                }
            })
        }
    }

    // remove unused parameter in url
    function removeParam(key, sourceURL) {
        let rtn = sourceURL.split("?")[0],
            param,
            params_arr = [],
            queryString = (sourceURL.indexOf("?") !== -1) ? sourceURL.split("?")[1] : "";
        if (queryString !== "") {
            params_arr = queryString.split("&");
            for (let i = params_arr.length - 1; i >= 0; i -= 1) {
                param = params_arr[i].split("=")[0];
                if (param === key) {
                    params_arr.splice(i, 1);
                }
            }
            if (params_arr.length) rtn = rtn + "?" + params_arr.join("&");
        }
        return rtn;
    }

    // show success notification function
    function showNotif(message) {
        const notifEl = document.querySelector('.blockit-notif')
        const notifWrap = document.createElement('div')

        notifWrap.classList.add('uk-alert-primary', 'uk-animation-slide-top-small')
        notifWrap.setAttribute('data-uk-alert', '')
        notifWrap.innerHTML = message
        notifEl.insertBefore(notifWrap, notifEl.firstChild)
        setTimeout(() => notifWrap.remove(), 3600)
    }
}

if(document.querySelector('.blockit-index') !== null) {
    // all required elements
    const pagesHeading = document.getElementById('pages-data')
    const postsHeading = document.getElementById('posts-data')
    const authorsHeading = document.getElementById('authors-data')
    const docUrl = 'https://www.google.com'
    const supportUrl = 'https://themeforest.net/item/liquid-investment-and-stock-broker-html-template/30278935/support'

    // socket lists
    document.addEventListener('readystatechange', () => {
        if(document.readyState == 'complete') {
            // send trigger to host
            ___browserSync___.socket.emit('triggerPageData', 'empty')
            ___browserSync___.socket.emit('triggerPostData', 'empty')
            ___browserSync___.socket.emit('readSettingsData', 'empty')

            // receive pages data from host
            ___browserSync___.socket.once('listPageData', async pagesObj => {
                const data = await pagesObj.data
                pagesHeading.textContent = data.length
            })

            // receive posts list data from host
            ___browserSync___.socket.once('listPostData', async postsObj => {
                const data = await postsObj.data
                postsHeading.textContent = data.length
            })

            // receive authors list data from host
            ___browserSync___.socket.once('processSettingsData', async authorsObj => {
                const data = await authorsObj.authors
                authorsHeading.textContent = data.length
            })
        }
    })

    document.querySelector('.doc-url').setAttribute('href', docUrl)
    document.querySelector('.support-url').setAttribute('href', supportUrl)
}

if(document.querySelector('.blockit-nav') !== null) {
    // all required elements
    const addNavBtn = document.getElementById('add-nav')
    const applyNav = document.getElementById('apply-nav')
    const saveNav = document.getElementById('save-nav')
    const navWrap = document.getElementById('nav-wrap')
    const navForm = document.getElementById('nav-form')
    const parentWrap = document.querySelector('.as-parent')

    // image placeholder
    const navPlaceholder = document.createElement('div')

    // form element
    const inputNameEl = document.getElementById('input-name')
    const inputIconEl = document.getElementById('input-icon')
    const inputCustomEl = document.getElementById('input-custom')
    const selectInternalEl = document.getElementById('select-internal')
    const radioInternalEl = document.getElementById('radio-internal')
    const radioCustomEl = document.getElementById('radio-custom')
    const textareaChildEl = document.getElementById('textarea-child')

    // radio button,checkbox and icon toggle wrap
    const toggleInternalWrap = document.querySelector('.toggle-internal')
    const toggleCustomWrap = document.querySelector('.toggle-custom')
    const toggleIconWrap = document.querySelector('.toggle-icon')
    const toggleTextWrap = document.querySelector('.toggle-text')

    // navigation object
    const navObj = {
        nav: []
    }

    // socket list of all page nav
    document.addEventListener('readystatechange', () => {
        if(document.readyState == 'complete') {
            // send trigger to host
            ___browserSync___.socket.emit('triggerNavigationData', 'empty')

            // receive navigation.json data
            ___browserSync___.socket.once('navData', data => createNavList(data))

            // receive pages list for select internal
            ___browserSync___.socket.once('listPageData', data => createPageList(data))

            // insert image placeholder into the dom
            navPlaceholder.classList.add('nav-placeholder')
            navPlaceholder.innerHTML = '<img class="uk-align-center" src="img/in-lazy.gif" data-src="img/blockit-navigation-placeholder.svg" alt="icon" width="182" data-uk-img>'
            navWrap.appendChild(navPlaceholder)
        }
    })

    // add parent navigation function
    function addNav() {
        addNavBtn.addEventListener('click', () => {        
            navForm.removeAttribute('hidden')
            navForm.querySelector('h4').innerText = 'Add new menu item'
            toggleIconWrap.setAttribute('hidden', '')
            toggleTextWrap.setAttribute('hidden', '')
            radioInternalEl.checked = true

            // remove image placeholder
            navPlaceholder.remove()

            // empty for default value
            inputNameEl.value = ''
            selectInternalEl.value = '0'
            inputCustomEl.value = 'https://'
            inputNameEl.focus()

            applyAdd()
            cancelChanges()
        })
    }

    // add child navigation function
    function addChild() {
        document.addEventListener('click', (e) => {
            if(e.target.classList.contains('btn-child')) {
                const labelNavWrap = e.target.closest('.wrap-nav').querySelector('.label-name')
                const labelNav = labelNavWrap.innerText
                const ParentLi = e.target.closest('.wrap-nav').parentElement
                const childWrap = e.target.closest('.wrap-nav').nextElementSibling

                // remove error class validation if exist
                inputNameEl.classList.remove('uk-form-danger')
                selectInternalEl.classList.remove('uk-form-danger')
                inputCustomEl.classList.remove('uk-form-danger')

                // remove image placeholder
                navPlaceholder.remove()

                navForm.removeAttribute('hidden')
                navForm.querySelector('h4').innerText = `Add child menu in '${labelNav.toLowerCase()}' menu`
                radioInternalEl.checked = true
                toggleCustomWrap.setAttribute('hidden', '')
                toggleInternalWrap.removeAttribute('hidden')
                toggleIconWrap.removeAttribute('hidden')
                toggleTextWrap.setAttribute('hidden', '')

                // empty for default value
                inputNameEl.value = ''
                selectInternalEl.value = '0'
                inputCustomEl.value = ''
                inputIconEl.value = ''
                inputNameEl.focus()

                applyAddChild(ParentLi, childWrap)
                cancelChanges()
            }
        })
    }

    // edit navigation function
    function editNav() {
        document.addEventListener('click', (e) => {
            if(e.target.classList.contains('btn-edit')) {
                const labelNavWrap = e.target.closest('.wrap-nav').querySelector('.label-name')
                const labelNav = labelNavWrap.innerText
                const linkNav = labelNavWrap.getAttribute('data-label-link')

                // remove error class validation if exist
                inputNameEl.classList.remove('uk-form-danger')
                selectInternalEl.classList.remove('uk-form-danger')
                inputCustomEl.classList.remove('uk-form-danger')

                navForm.removeAttribute('hidden')
                navForm.querySelector('h4').innerText = `Edit '${labelNav.toLowerCase()}' menu item`

                // remove image placeholder
                navPlaceholder.remove()

                // hide toggle for icon input
                if(labelNavWrap.parentElement.classList.contains('parent-nav')) {
                    toggleIconWrap.setAttribute('hidden', '')
                } else {
                    toggleIconWrap.removeAttribute('hidden')
                }

                // hide toggle for text checkbox
                if(labelNavWrap.parentElement.nextElementSibling != null) {
                    toggleTextWrap.removeAttribute('hidden')
                } else {
                    toggleTextWrap.setAttribute('hidden', '')
                }

                inputNameEl.value = labelNavWrap.innerText
                inputIconEl.value = labelNavWrap.getAttribute('data-label-icon')
                
                // check if text content for child menu present
                if(labelNavWrap.parentElement.nextElementSibling != null && labelNavWrap.parentElement.nextElementSibling.classList.contains('text-nav')) {
                    textareaChildEl.value = labelNavWrap.parentElement.nextElementSibling.innerText
                } else {
                    textareaChildEl.value = ''
                }

                if(selectInternalEl.value !== linkNav) {
                    selectInternalEl.value = linkNav
                    inputCustomEl.value = ''
                    radioInternalEl.checked = true
                    toggleCustomWrap.setAttribute('hidden', '')
                    toggleInternalWrap.removeAttribute('hidden')
                }

                if(selectInternalEl.value.length == 0) {
                    selectInternalEl.value = 0
                    inputCustomEl.value = linkNav
                    radioCustomEl.checked = true
                    toggleInternalWrap.setAttribute('hidden', '')
                    toggleCustomWrap.removeAttribute('hidden')
                }

                if(selectInternalEl.value != 0 && radioCustomEl.checked) {
                    radioInternalEl.checked = true
                }

                applyEdit(labelNavWrap)
                cancelChanges()
            }
        })
    }

    // delete navigation function
    function deleteNav() {
        document.addEventListener('click', (e) => {
            if(e.target.classList.contains('btn-delete')) {
                const nameNav = e.target.closest('.wrap-nav').parentElement.querySelector('.label-name').innerText
                const ulChild = e.target.closest('.uk-sortable')
                const confirmDel = confirm (`Are you sure delete ${nameNav} menu?`)

                if(confirmDel) {
                    e.target.closest('.wrap-nav').parentElement.remove()

                    // show notification message
                    showNotif(`<i class="fas fa-exclamation-circle"></i> ${nameNav} menu succesfully deleted`)
                    
                    // remove image placeholder and hide nav form
                    navForm.setAttribute('hidden', '')
                }
                if(ulChild.children.length == 0 && ulChild.classList.contains('as-child')) ulChild.remove()
            }
        })
    }

    // cancel changes button function
    function cancelChanges() {
        document.addEventListener('click', (e) => {
            if(e.target.id == 'cancel-nav') {
                e.preventDefault()
                navForm.setAttribute('hidden', '')
                navWrap.appendChild(navPlaceholder)
            }
        })
    }

    // create nav list item into the dom
    function createNavList(data) {
        const navObj = JSON.parse(data).nav
        const parentWrap = document.querySelector('.as-parent')

        // child nav icon condition
        function childIcon(nav) {
            return nav.icon !== undefined ? `data-label-icon="${nav.icon.name}"` : ''
        }

        // HTML tag child nav
        function childTag(nav) {
            return `
            <div class="wrap-nav child-nav">
                <span class="label-name" data-label-link="${nav.link}"${childIcon(nav)}><i class="fas fa-level-up-alt fa-sm uk-margin-small-right"></i>${nav.title}</span>
                <button class="btn-edit uk-button uk-button-text uk-button-small uk-margin-left">Edit</button>
                <div class="uk-position-top-right">
                    <button class="btn-delete uk-button fas fa-trash-alt uk-label uk-border-pill"></button>
                </div>
            </div>`
        }

        navObj.forEach(eachNav => {
            const parentLi = document.createElement('li')
            parentLi.innerHTML = `
            <div class="wrap-nav parent-nav">
                <span class="label-name" data-label-link="${eachNav.link}"><i class="fas fa-bars fa-sm uk-margin-small-right"></i>${eachNav.title}</span>
                <button class="btn-edit uk-button uk-button-text uk-button-small uk-margin-left">Edit</button>
                <button class="btn-child uk-button uk-button-text uk-button-small">Add child</button>
                <div class="uk-position-top-right">
                    <button class="btn-delete uk-button fas fa-trash-alt uk-label uk-border-pill"></button>
                </div>
            </div>`
            parentWrap.appendChild(parentLi)

            // dropdown single
            if(eachNav.dropdown !== undefined && eachNav.dropdown.single !== undefined) {
                const childWrap = document.createElement('ul')
                childWrap.classList.add('as-child', 'uk-list', 'uk-margin-medium-left')
                childWrap.setAttribute('data-uk-sortable', 'handle: .child-nav; cls-custom: drag-nav')            
                parentLi.appendChild(childWrap)

                eachNav.dropdown.single.forEach(eachNav => {
                    const childLi = document.createElement('li') 
                    childLi.innerHTML = childTag(eachNav)
                    childWrap.appendChild(childLi)
                })
            }

            // dropdown multiple and mutiple text
            if(eachNav.dropdown !== undefined) {
                let bufferParent = ''
                if(eachNav.dropdown.multiple !== undefined) {
                    const childWrap = document.createElement('ul')
                    childWrap.classList.add('as-child', 'as-multiple', 'uk-list', 'uk-margin-medium-left')
                    childWrap.setAttribute('data-uk-sortable', 'handle: .child-nav; cls-custom: drag-nav')
                    parentLi.appendChild(childWrap)

                    eachNav.dropdown.multiple.forEach(eachNav => {
                        const childLi = document.createElement('li')
                        childLi.innerHTML = childTag(eachNav)
                        childWrap.appendChild(childLi)
                        bufferParent = childWrap.parentElement
                    })
                }
                if(eachNav.dropdown.multiple_text !== undefined) {
                    const textParent = bufferParent

                    eachNav.dropdown.multiple_text.forEach(eachNav => {                    
                        const textWrap = document.createElement('div')
                        textWrap.classList.add('wrap-nav', 'text-nav', 'uk-margin-medium-left', 'uk-transition-toggle')
                        textWrap.setAttribute('tabindex', '0')
                        textWrap.innerText = eachNav.text
                        textParent.insertBefore(textWrap, textParent.children[1])
                    })
                }
            }
        })
    }

    // create page list item into select form
    function createPageList(data) {
        const selectWrap = document.getElementById('select-internal')
        const optionBlog = document.createElement('option')

        data.forEach(e => {        
            const optionItem = document.createElement('option')

            optionItem.setAttribute('value', e.replace(/.hbs$/,".html"))
            optionItem.innerHTML = e.replace(/.hbs$/,".html")

            selectWrap.appendChild(optionItem)
        })
        
        // set as blog
        optionBlog.setAttribute('value', 'blog/page-1.html')
        optionBlog.innerHTML = 'set as blog'
        selectWrap.insertBefore(optionBlog, selectWrap.children[1])
    }

    // check internal link or custom link value
    function checkLink() {
        let value
        if(radioInternalEl.checked) {
            value = selectInternalEl.value
        } else if(radioCustomEl.checked) {
            value = inputCustomEl.value
        }
        return value
    }

    // check icon value
    function checkIcon() {
        let value
        if(inputIconEl.value.length != 0) {
            value = `data-label-icon="${inputIconEl.value}"`
        } else {
            value = ''
        }
        return value
    }

    // check internal or custom value on edit
    function checkLinkEdit(ele) {
        let value

        if(radioInternalEl.checked && ele.getAttribute('data-label-link') != selectInternalEl.value) {
            value = selectInternalEl.value
        } else if(radioInternalEl.checked) {
            value = selectInternalEl.value
        } else if(radioCustomEl.checked && ele.getAttribute('data-label-link') != inputCustomEl.value) {
            value = inputCustomEl.value
        } else if(radioCustomEl.checked) {
            value = inputCustomEl.value
        }

        return value
    }

    // radio button options
    function linkOptions() {    
        radioInternalEl.addEventListener('click', () => {
            toggleCustomWrap.setAttribute('hidden', '')
            toggleInternalWrap.removeAttribute('hidden')
            radioInternalEl.checked = true
        })
        radioCustomEl.addEventListener('click', () => {
            toggleInternalWrap.setAttribute('hidden', '')
            toggleCustomWrap.removeAttribute('hidden')
            radioCustomEl.checked = true
        })
    }

    // apply add button function
    function applyAdd() {
        applyNav.onclick = e => {
            e.preventDefault()
            const navItem = document.createElement('li')

            navItem.innerHTML = `
            <div class="wrap-nav parent-nav">
                <span class="label-name" data-label-link="${checkLink()}"><i class="fas fa-bars fa-sm uk-margin-small-right"></i>${inputNameEl.value}</span>
                <button class="btn-edit uk-button uk-button-text uk-button-small uk-margin-left">Edit</button>
                <button class="btn-child uk-button uk-button-text uk-button-small">Add child</button>
                <div class="uk-position-top-right">
                    <button class="btn-delete uk-button fas fa-trash-alt uk-label uk-label-danger uk-border-pill"></button>
                </div>
            </div>`

            // input form validation
            if(inputNameEl.value.length == 0) {
                inputNameEl.classList.add('uk-form-danger')
                inputNameEl.addEventListener('click', () => inputNameEl.classList.remove('uk-form-danger'))
            } else if(radioInternalEl.checked && selectInternalEl.value == 0) {
                selectInternalEl.classList.add('uk-form-danger')
                selectInternalEl.addEventListener('click', () => selectInternalEl.classList.remove('uk-form-danger'))
            } else if(radioCustomEl.checked && inputCustomEl.value.length == 0) {
                inputCustomEl.classList.add('uk-form-danger')
                inputCustomEl.addEventListener('click', () => inputCustomEl.classList.remove('uk-form-danger'))
            } else {
                parentWrap.appendChild(navItem)
                navForm.setAttribute('hidden', '')

                // show notification message
                showNotif(`<i class="fas fa-exclamation-circle"></i> ${inputNameEl.value} menu succesfully added`)

                navWrap.appendChild(navPlaceholder)
            }
        }
    }

    // apply add child button function
    function applyAddChild(parentEl, existWrap) {
        applyNav.onclick = e => {
            e.preventDefault()
            const ulWrap = document.createElement('ul')
            const navItem = document.createElement('li')

            navItem.innerHTML = `
            <div class="wrap-nav child-nav">
                <span class="label-name" data-label-link="${checkLink()}"${checkIcon()}><i class="fas fa-level-up-alt fa-sm uk-margin-small-right"></i>${inputNameEl.value}</span>
                <button class="btn-edit uk-button uk-button-text uk-button-small uk-margin-left">Edit</button>
                <div class="uk-position-top-right">
                    <button class="btn-delete uk-button fas fa-trash-alt uk-label uk-label-danger uk-border-pill"></button>
                </div>
            </div>`

            // input form validation
            if(inputNameEl.value.length == 0) {
                inputNameEl.classList.add('uk-form-danger')
                inputNameEl.addEventListener('click', () => inputNameEl.classList.remove('uk-form-danger'))
            } else if(radioInternalEl.checked && selectInternalEl.value == 0) {
                selectInternalEl.classList.add('uk-form-danger')
                selectInternalEl.addEventListener('click', () => selectInternalEl.classList.remove('uk-form-danger'))
            } else if(radioCustomEl.checked && inputCustomEl.value.length == 0) {
                inputCustomEl.classList.add('uk-form-danger')
                inputCustomEl.addEventListener('click', () => inputCustomEl.classList.remove('uk-form-danger'))
            } else {
                if(existWrap == null) {
                    ulWrap.classList.add('as-child', 'uk-list', 'uk-margin-medium-left')
                    ulWrap.setAttribute('data-uk-sortable', 'handle: .child-nav; cls-custom: drag-nav')
                    ulWrap.appendChild(navItem)
                    parentEl.appendChild(ulWrap)
                    navForm.setAttribute('hidden', '')

                    // show notification message
                    showNotif(`<i class="fas fa-exclamation-circle"></i> ${inputNameEl.value} menu succesfully added as child`)
                } else {
                    parentEl.querySelector('.as-child').appendChild(navItem)
                    navForm.setAttribute('hidden', '')

                    // show notification message
                    showNotif(`<i class="fas fa-exclamation-circle"></i> ${inputNameEl.value} menu succesfully added as child`)
                    
                    navWrap.appendChild(navPlaceholder)
                }
            }
        }
    }

    // apply edit button function
    function applyEdit(wrap) {
        applyNav.onclick = e => {
            e.preventDefault()
            const liParent = wrap.closest('.wrap-nav').parentElement
            const textChild = document.createElement('div')

            // check textarea.value before insert text child into the dom
            if(wrap.parentElement.nextElementSibling != null && wrap.parentElement.nextElementSibling.innerText != textareaChildEl.value && textareaChildEl.value != 0) {
                if(wrap.parentElement.nextElementSibling.classList.contains('text-nav')) {
                    wrap.parentElement.nextElementSibling.remove()
                }
                
                textChild.classList.add('wrap-nav', 'text-nav', 'uk-margin-medium-left', 'uk-transition-toggle')
                textChild.setAttribute('tabindex', '0')
                textChild.innerText = textareaChildEl.value
                liParent.insertBefore(textChild, wrap.parentElement.nextElementSibling)
            }
            
            // check if textarea empty and remove the .text-nav element from the dom
            if(wrap.parentElement.nextElementSibling != null && wrap.parentElement.nextElementSibling.classList.contains('text-nav') && textareaChildEl.value.length == 0) {
                wrap.parentElement.nextElementSibling.remove()
            }

            wrap.innerHTML = `<i class="fas fa-bars fa-sm uk-margin-small-right"></i>${inputNameEl.value}`
            if(wrap.closest('.as-child') !== null) wrap.innerHTML = `<i class="fas fa-level-up-alt fa-sm uk-margin-small-right"></i>${inputNameEl.value}`
            wrap.setAttribute('data-label-link', checkLinkEdit(wrap))

            if(inputIconEl.value != 0) {
                wrap.setAttribute('data-label-icon', inputIconEl.value)
            } else if(!toggleIconWrap.hasAttribute('hidden') && wrap.getAttribute('data-label-icon') != null) {
                inputIconEl.value = wrap.getAttribute('data-label-icon')
            }
            inputIconEl.value = ''

            navForm.setAttribute('hidden', '')

            // show notification message
            showNotif(`<i class="fas fa-exclamation-circle"></i> ${inputNameEl.value} menu succesfully edit`)

            navWrap.appendChild(navPlaceholder)
        }
    }

    // show success notification function
    function showNotif(message) {
        const notifEl = document.querySelector('.blockit-notif')
        const notifWrap = document.createElement('div')

        notifWrap.classList.add('uk-alert-primary', 'uk-animation-slide-top-small')
        notifWrap.setAttribute('data-uk-alert', '')
        notifWrap.innerHTML = message
        notifEl.insertBefore(notifWrap, notifEl.firstChild)
        setTimeout(() => notifWrap.remove(), 3600)
    }

    addNav()
    addChild()
    editNav()
    deleteNav()
    linkOptions()

    saveNav.addEventListener('click', () => {    
        const parentList = parentWrap.querySelectorAll('.parent-nav')

        navObj.nav.splice(0, navObj.nav.length)

        parentList.forEach((eachParent) => {
            const parentNav = {
                title: eachParent.children[0].innerText,
                link: eachParent.children[0].attributes[1].textContent
            }

            navObj.nav.push(parentNav)

            if(eachParent.nextElementSibling !== null) {
                const childWrap = eachParent.nextElementSibling
                const childList = childWrap.querySelectorAll('.child-nav')

                parentNav.dropdown = {
                    single: []
                }

                childList.forEach((eachChild) => {
                    let childNav = {
                        title: eachChild.children[0].innerText,
                        link: eachChild.children[0].attributes[1].textContent
                    }
                    parentNav.dropdown.single.push(childNav)

                    if(eachChild.children[0].attributes[2] !== undefined) {
                        childNav.icon = {
                            name: eachChild.children[0].attributes[2].textContent
                        }
                    }
                })

                if(childWrap.classList.contains('text-nav')) {
                    const childWrapMultiple = childWrap.nextElementSibling
                    const childListMultiple = childWrapMultiple.querySelectorAll('.child-nav')

                    parentNav.dropdown = {
                        multiple: [],
                        multiple_text: [
                            {
                                text: childWrap.innerText
                            }
                        ]
                    }

                    childListMultiple.forEach((eachChild) => {
                        let childNavMultipe = {
                            title: eachChild.children[0].innerText,
                            link: eachChild.children[0].attributes[1].textContent
                        }
                        parentNav.dropdown.multiple.push(childNavMultipe)

                        if(eachChild.children[0].attributes[2] !== undefined) {
                            childNavMultipe.icon = {
                                name: eachChild.children[0].attributes[2].textContent
                            }
                        }
                    })
                }
            }
        })

        // send save data navigation to host
        ___browserSync___.socket.emit('saveNavigation', navObj);
    })
}

if(document.querySelector('.blockit-pages') !== null && document.getElementById('add-page') !== null) {
    // socket list of all file names in section directory
    document.addEventListener('readystatechange', () => {
        if(document.readyState == 'complete') {
            // send trigger to host
            ___browserSync___.socket.emit('triggerPageData', 'empty')

            // receive pages list data from host
            ___browserSync___.socket.once('listPageData', async pagesObj => {
                const data = await pagesObj.data
                createListPages(data)
            })

            addPage()
            editPage()
            deletePage()
        }
    })

    // add page function
    function addPage() {
        const addPageBtn = document.getElementById('add-page')
        addPageBtn.addEventListener('click', () => {
            const params = new URLSearchParams()

            params.append('addPage', 'true')
            location.href = `action-page.html?${params.toString()}`
        })
    }

    // edit page function
    function editPage() {
        document.addEventListener('click', (e) => {
            if(e.target.classList.contains('btn-edit')) {
                const fileName = e.target.closest('tr').querySelector('.page-name').innerText

                // send data page to host
                ___browserSync___.socket.emit('editPageData', fileName)

                // receive current section in page from host
                ___browserSync___.socket.once('currentPageData', (sectionsArr, layout, title) => {
                    const params = new URLSearchParams()

                    params.append('addPage', 'false')
                    params.append('pageName', fileName)
                    params.append('pageTitle', title)
                    params.append('layoutType', layout)
                    params.append('sections', JSON.stringify(sectionsArr))
                    location.href = `action-page.html?${params.toString()}`
                })
            }
        })
    }

    // delete page function
    function deletePage() {
        document.addEventListener('click', (e) => {
            if(e.target.classList.contains('btn-delete')) {
                const removeEl = e.target.closest('tr')
                const fileName = removeEl.querySelector('.page-name').innerText
                const dataLength = removeEl.parentElement.children.length
                const confirmDel = confirm (`Are you sure delete the "${fileName}" page?`)

                // send data page to host
                if(confirmDel) {
                    ___browserSync___.socket.emit('deletePageData', fileName)
                    removeEl.remove()
                    document.querySelector('.head-title').innerHTML = `Pages <span class="uk-text-small uk-text-muted">All (${dataLength - 1})</span>`
                    showNotif(`<i class="fas fa-exclamation-circle"></i> ${fileName} has been successfully deleted`)
                }
            }
        })
    }

    // create pages list into the dom function
    function createListPages(dataPages) {
        const tableBody = document.querySelector('tbody')
        const rgxLayout = /(?<=layout:\s).*/g

        if(dataPages.length == 0) {
            const parentEl = document.querySelector('.uk-width-1-1')
            const placeholderEl = document.createElement('div')
            const placeholderTag = `
            <img class="missing-list-placeholder uk-margin-remove-bottom" src="img/in-lazy.gif" data-src="img/blockit-missing-page-post.svg" alt="icon" width="256" data-uk-img>
            <h5 class="uk-text-muted uk-margin-remove-top">start your creative idea by clicking<br/>the "add new page" button.</h5>`

            placeholderEl.classList.add('uk-text-center')
            placeholderEl.innerHTML = placeholderTag
            parentEl.appendChild(placeholderEl)
        }

        document.querySelector('.head-title').innerHTML = `Pages <span class="uk-text-small uk-text-muted">All (${dataPages.length})</span>`

        dataPages.forEach(page => {
            const tableData = document.createElement('tr')
            const modifiedDate = new Date(page.date)

            tableData.innerHTML = `
            <td>
                <div class="page-wrapper uk-inline">
                    <div class="page-icon uk-float-left">
                        <i class="fas fa-swatchbook"></i>
                    </div>
                    <div class="uk-margin-small-left uk-float-left">
                        <span class="page-name">${page.name}</span>
                    </div>
                </div>
            </td>
            <td><span class="uk-text-muted">${modifiedDate.getFullYear()}/${modifiedDate.getMonth()+1}/${modifiedDate.getDate()} at ${modifiedDate.getHours()}:${modifiedDate.getMinutes()}</span></td>
            <td><span class="uk-label uk-label-warning uk-text-small uk-border-rounded">${page.content.match(rgxLayout)}</span></td>
            <td>
                <div class="action-wrap uk-flex uk-flex-right">
                    <button class="btn-edit uk-button uk-button-text uk-button-small"><i class="fas fa-wrench"></i>Edit</button>
                    <button class="btn-delete uk-button uk-button-text uk-button-small"><i class="fas fa-trash-alt"></i>Delete</button>
                </div>
            </td>`

            tableBody.appendChild(tableData)
        })
    }

    // show success notification function
    function showNotif(message) {
        const notifEl = document.querySelector('.blockit-notif')
        const notifWrap = document.createElement('div')

        notifWrap.classList.add('uk-alert-primary', 'uk-animation-slide-top-small')
        notifWrap.setAttribute('data-uk-alert', '')
        notifWrap.innerHTML = message
        notifEl.insertBefore(notifWrap, notifEl.firstChild)
        setTimeout(() => notifWrap.remove(), 3600)
    }
}

if(document.querySelector('.blockit-posts') !== null) {
    // socket list of all file names in section directory
    document.addEventListener('readystatechange', () => {
        if(document.readyState == 'complete') {
            // send trigger to host
            ___browserSync___.socket.emit('triggerPostData', 'empty')

            // receive post list data from host
            ___browserSync___.socket.once('listPostData', async pagesObj => {
                const data = await pagesObj.data
                createListPosts(data)
            })

            addPost()
            editPost()
            deletePost(tagFormat)
        }
    })

    // add post function
    function addPost() {
        const addPageBtn = document.getElementById('add-post')
        addPageBtn.addEventListener('click', () => {
            const params = new URLSearchParams()

            params.append('addPost', 'true')
            location.href = `action-post.html?${params.toString()}`
        })
    }

    // edit post function
    function editPost() {
        document.addEventListener('click', (e) => {
            if(e.target.classList.contains('btn-edit')) {
                const rawName = e.target.closest('tr').querySelector('.page-name').innerText.toLowerCase()
                const fileName = rawName.replace(/^(.{50}[^\s]*).*/, "$1").replace(/ /g,"-").replace(/[^a-zA-Z0-9_-]/g,'')

                // send data post to host
                ___browserSync___.socket.emit('editPostData', fileName)

                // receive current section in post from host
                ___browserSync___.socket.once('currentPostData', postContent => {
                    const data = JSON.parse(postContent)
                    const params = new URLSearchParams()

                    params.append('addPost', 'false')
                    params.append('postTitle', data.title)
                    params.append('postAuthor', data.author.name)
                    params.append('postCategory', data.category)
                    params.append('postTags', data.tags)
                    params.append('postImage', data.image)
                    params.append('postShare', data.share)

                    delete data.title
                    delete data.author
                    delete data.category
                    delete data.tags
                    delete data.image
                    delete data.share

                    params.append('postContent', JSON.stringify(data))
                    location.href = `action-post.html?${params.toString()}`
                })
            }
        })
    }

    // delete post function
    function deletePost(tagFormat) {
        document.addEventListener('click', (e) => {
            if(e.target.classList.contains('btn-delete')) {
                const removeEl = e.target.closest('tr')
                const rawName = removeEl.querySelector('.page-name').innerText.toLowerCase()
                const fileName = rawName.replace(/^(.{50}[^\s]*).*/, "$1").replace(/ /g,"-").replace(/[^a-zA-Z0-9_-]/g,'')
                const dataLength = removeEl.parentElement.children.length
                const confirmDel = confirm (`Are you sure delete the "${removeEl.querySelector('.page-name').innerText}" post?`)

                // send data page to host
                if(confirmDel) {
                    ___browserSync___.socket.emit('deletePostData', fileName, tagFormat())
                    ___browserSync___.socket.emit('mergePostFiles', 'empty')
                    removeEl.remove()
                    document.querySelector('.head-title').innerHTML = `Posts <span class="uk-text-small uk-text-muted">All (${dataLength - 1})</span>`
                    showNotif(`<i class="fas fa-exclamation-circle"></i> ${fileName} has been successfully deleted`)
                }
            }
        })
    }

    // create posts list into the dom function
    function createListPosts(dataPosts) {
        const tableBody = document.querySelector('tbody')
        dataPosts.sort((a,b) => new Date(b.date) - new Date(a.date))

        if(dataPosts.length == 0) {
            const parentEl = document.querySelector('.uk-width-1-1')
            const placeholderEl = document.createElement('div')
            const placeholderTag = `
            <img class="missing-list-placeholder uk-margin-remove-bottom" src="img/in-lazy.gif" data-src="img/blockit-missing-page-post.svg" alt="icon" width="256" data-uk-img>
            <h5 class="uk-text-muted uk-margin-remove-top">start your creative idea by clicking<br/>the "add new post" button.</h5>`

            placeholderEl.classList.add('uk-text-center')
            placeholderEl.innerHTML = placeholderTag
            parentEl.appendChild(placeholderEl)
        }
        
        document.querySelector('.head-title').innerHTML = `Posts <span class="uk-text-small uk-text-muted">All (${dataPosts.length})</span>`

        dataPosts.forEach(page => {
            const tableData = document.createElement('tr')
            const modifiedDate = new Date(page.date)

            tableData.innerHTML = `
            <td>
                <div class="page-wrapper uk-inline">
                    <div class="page-icon uk-float-left">
                        <i class="fas fa-align-left"></i>
                    </div>
                    <div class="uk-margin-small-left uk-float-left">
                        <span class="page-name">${trimLongTitle(page.title)}</span>
                    </div>
                </div>
            </td>
            <td><span class="uk-text-muted">${modifiedDate.getFullYear()}/${modifiedDate.getMonth()+1}/${modifiedDate.getDate()} at ${modifiedDate.getHours()}:${modifiedDate.getMinutes()}</span></td>
            <td>${page.author.name}</td>
            <td><span class="uk-label uk-label-warning uk-text-small uk-border-rounded">${page.category}</span></td>
            <td>
                <div class="action-wrap uk-flex uk-flex-right">
                    <button class="btn-edit uk-button uk-button-text uk-button-small"><i class="fas fa-wrench"></i>Edit</button>
                    <button class="btn-delete uk-button uk-button-text uk-button-small"><i class="fas fa-trash-alt"></i>Delete</button>
                </div>
            </td>`

            tableBody.appendChild(tableData)
        })
    }

    // trim long post title function
    function trimLongTitle(string) {
        let cut = string.indexOf(' ', 50);
        if(cut == -1) return string;
        return string.substring(0, cut) + ' ...'
    }

    // show success notification function
    function showNotif(message) {
        const notifEl = document.querySelector('.blockit-notif')
        const notifWrap = document.createElement('div')

        notifWrap.classList.add('uk-alert-primary', 'uk-animation-slide-top-small')
        notifWrap.setAttribute('data-uk-alert', '')
        notifWrap.innerHTML = message
        notifEl.insertBefore(notifWrap, notifEl.firstChild)
        setTimeout(() => notifWrap.remove(), 3600)
    }
}

if(document.querySelector('.blockit-settings') !== null) {
    // site info variables
    const pageTitleEl = document.getElementById('setting-page-title')
    const metaDescriptEl = document.getElementById('setting-meta-description')
    const metaKeywordsEl = document.getElementById('setting-meta-keywords')
    const metaAuthorEl = document.getElementById('setting-meta-author')
    const metaThemeColor = document.getElementById('setting-meta-themecolor')
    const faviconEl = document.querySelector('.setting-favicon').querySelector('img')
    const touchIconEl = document.querySelector('.setting-touch-icon').querySelector('img')

    // upload logo, favicon, image assets
    const inputSiteLogo = document.querySelector('.site-logo-upload')
    const inputFavicon = document.querySelector('.favicon-upload')
    const inputTouchIcon = document.querySelector('.touch-icon-upload')

    // header variables
    const siteLogoEl = document.querySelector('.setting-site-logo').querySelector('img')
    const logoWidthEl = document.getElementById('setting-logo-width')
    const logoHeightEl = document.getElementById('setting-logo-height')
    const signUpTitleEl = document.getElementById('setting-signup-title')
    const signInTitleEl = document.getElementById('setting-signin-title')
    const signUpUrlEl = document.getElementById('setting-signup-url')
    const signInUrlEl = document.getElementById('setting-signin-url')

    // footer variables
    const copyrightTextEl = document.getElementById('setting-copyright')
    const footerLinkRadio = document.querySelectorAll('input[name="setting-footer-link"]')
    const footerLinkTitle = document.querySelectorAll('.setting-footer-link-title')
    const footerLinkUrl = document.querySelectorAll('.setting-footer-link-url')
    const footerPaymentRadio = document.querySelectorAll('input[name="setting-footer-payment"]')
    const footerPaymentLogo = document.querySelectorAll('[alt="setting-footer-payment"]')
    const footerPaymentDimension = document.querySelectorAll('.setting-logo-dimension')
    const footerEditorWrap = document.getElementById('editor-footer-html')
    const footerEditorBtn = document.getElementById('footer-editor-btn')
    const footerEditorSaveBtn = document.getElementById('footer-editor-save-btn')

    // color variables
    const inputBackgroundColor = document.getElementById('setting-background-color')
    const inputPrimaryColor = document.getElementById('setting-primary-color')
    const inputSecondaryColor = document.getElementById('setting-secondary-color')
    const inputHeadingColor = document.getElementById('setting-heading-color')
    const inputBodyTextColor = document.getElementById('setting-body-text-color')
    const inputLinkColor = document.getElementById('setting-link-color')
    const inputColorArr = [ inputBackgroundColor, inputPrimaryColor, inputSecondaryColor, inputHeadingColor, inputBodyTextColor, inputLinkColor, metaThemeColor ]

    // blog variables
    const postPerPageEl = document.getElementById('setting-posts-per-page')
    const widgetCategoriesEl = document.getElementById('setting-widget-categories')
    const widgetLatestEl = document.getElementById('setting-widget-latest')
    const widgetTagsEl = document.getElementById('setting-widget-tags')
    const displayAuthorRadio = document.querySelectorAll('input[name="setting-display-author"]')
    const displayTagRadio = document.querySelectorAll('input[name="setting-display-tags"]')
    const displayShareRadio = document.querySelectorAll('input[name="setting-display-share"]')
    const disqussEl = document.getElementById('setting-disquss')

    // social media variables
    const socialFacebookEl = document.getElementById('setting-social-facebook')
    const socialTwitterkEl = document.getElementById('setting-social-twitter')
    const socialInstagramEl = document.getElementById('setting-social-instagram')
    const socialLinkedinEl = document.getElementById('setting-social-linkedin')
    const socialBehanceEl = document.getElementById('setting-social-behance')
    const socialWhatsappEl = document.getElementById('setting-social-whatsapp')
    const socialTelegramEl = document.getElementById('setting-social-telegram')
    const socialYoutubeEl = document.getElementById('setting-social-youtube')

    // data buffer
    const footerDataBuffer = {}
    const settingDataBuffer = {}

    // back to last settings tab when page refresh
    lastSettingsTab()

    document.addEventListener('readystatechange', () => {
        if(document.readyState == 'complete') {
            // send trigger to host
            ___browserSync___.socket.emit('readSettingsData', 'empty')

            // receive settings data for form setting
            ___browserSync___.socket.once('processSettingsData', async settingsObj => {
                const data = await settingsObj

                siteInfoForm(data)
                colorForm(data)
                headerForm(data)
                footerForm(data)
                authorForm(data)
                blogForm(data)
                socialMediaForm(data)

                Object.assign(settingDataBuffer, data)
            })

            // receive footer data for footer editor
            ___browserSync___.socket.once('processFooterData', async footerObj => {
                const data = await footerObj

                footerEditorBtn.addEventListener('click', () => footerEditor(footerEditorWrap, footerEditorSave, data))
            })

            // input site logo, footer payment logo, author image, and favicon
            inputSiteLogo.addEventListener('change', input => changeSiteLogo(input.target))
            inputFavicon.addEventListener('change', input => changeFavicon(input.target))
            inputTouchIcon.addEventListener('change', input => changeTouchIcon(input.target))
            document.addEventListener('change', e => {
                if(e.target.classList.contains('img-author-upload')) changeAuthor(e.target)
            })
            document.addEventListener('change', e => {
                if(e.target.classList.contains('footer-payment-upload')) changePaymentLogo(e.target)
            })

            // input colors
            colorPicker(inputColorArr)

            // save all settings configuration
            saveSettings(footerDataBuffer)
        }
    })

    // save settings function
    function saveSettings(bufferData) {
        const saveSettingsBtn = document.getElementById('save-settings')
        const savedData = {}
        saveSettingsBtn.addEventListener('click',() => {
            saveSettingsBtn.innerHTML = '<img class="uk-margin-small-right blockit-spinner" src="img/blockit-spinner.svg" width="16">Loading...'

            savedData.siteInfo = settingSiteInfo()        
            savedData.colors = settingColors()
            savedData.header = settingHeader()
            savedData.footer = settingFooter()
            savedData.authors = settingAuthors()
            savedData.blog = settingBlog()
            savedData.socialMedia = settingSocialMedia()

            // send settings and footer editor data to host
            ___browserSync___.socket.emit('sendSettingsData', savedData, tagFormat(), bufferData)

            setTimeout(() => {
                saveSettingsBtn.innerHTML = '<i class="fas fa-save fa-sm uk-margin-small-right"></i>Save settings'
                showNotif('<i class="fas fa-exclamation-circle"></i> Settings successfully saved')
            }, 1500)
        })
    }

    // color picker function
    function colorPicker(inputs) {
        inputs.forEach(el => {
            el.addEventListener('input', () => {
                const selectedColor = el.value.toUpperCase()
                el.previousElementSibling.style.backgroundColor = selectedColor
                el.nextElementSibling.textContent = selectedColor
            })
        })
    }

    // site info function
    function settingSiteInfo() {
        const siteInfo = {
            pageTitle: pageTitleEl.value,
            metaDescription: metaDescriptEl.value,
            metaKeywords: metaKeywordsEl.value.replace(/\s/g, '').split(','),
            metaAuthor: metaAuthorEl.value,
            metaThemeColor: metaThemeColor.value.toUpperCase(),
            favicon: faviconEl.getAttribute('src').includes('../') ? faviconEl.getAttribute('src').substr(3) : faviconEl.getAttribute('src').replace("http://localhost:3000/", ""),
            touchIcon: removeParam('browsersync', touchIconEl.getAttribute('src').includes('../') ? touchIconEl.getAttribute('src').substr(3) : touchIconEl.getAttribute('src').replace("http://localhost:3000/", ""))
        }
        return siteInfo
    }

    // colors function
    function settingColors() {
        const colors = {
            backgroundColor: inputBackgroundColor.value.toUpperCase(),
            primaryColor: inputPrimaryColor.value.toUpperCase(),
            secondaryColor: inputSecondaryColor.value.toUpperCase(),
            headingColor: inputHeadingColor.value.toUpperCase(),
            bodyTextColor: inputBodyTextColor.value.toUpperCase(),
            linkColor: inputLinkColor.value.toUpperCase()
        }
        return colors
    }

    // header function
    function settingHeader() {
        const header = {
            siteLogo: {
                src: removeParam('browsersync', siteLogoEl.getAttribute('src').includes('../') ? siteLogoEl.getAttribute('src').substr(3) : siteLogoEl.getAttribute('src').replace("http://localhost:3000/", "")),
                width: logoWidthEl.value,
                height: logoHeightEl.value,
            },
            signup: {
                title: signUpTitleEl.value,
                url: signUpUrlEl.value,
                external: signUpUrlEl.value.substring(0, 4) == 'http' ? true : false
            },
            signin: {
                title: signInTitleEl.value,
                url: signInUrlEl.value,
                external: signInUrlEl.value.substring(0, 4) == 'http' ? true : false
            }
        }
        return header
    }

    // footer function
    function settingFooter() {
        const footer = {
            copyrightText: copyrightTextEl.value,
            footerLink: {
                enabled: footerLinkRadio[0].checked ? true : false,
                link: [
                    {
                        title: footerLinkTitle[0].value,
                        url: footerLinkUrl[0].value,
                        external: footerLinkUrl[0].value.substring(0, 4) == 'http' ? true : false
                    },
                    {
                        title: footerLinkTitle[1].value,
                        url: footerLinkUrl[1].value,
                        external: footerLinkUrl[1].value.substring(0, 4) == 'http' ? true : false
                    },
                    {
                        title: footerLinkTitle[2].value,
                        url: footerLinkUrl[2].value,
                        external: footerLinkUrl[2].value.substring(0, 4) == 'http' ? true : false
                    },
                    {
                        title: footerLinkTitle[3].value,
                        url: footerLinkUrl[3].value,
                        external: footerLinkUrl[3].value.substring(0, 4) == 'http' ? true : false
                    },
                    {
                        title: footerLinkTitle[4].value,
                        url: footerLinkUrl[4].value,
                        external: footerLinkUrl[4].value.substring(0, 4) == 'http' ? true : false
                    }
                ]
            },
            paymentLogo: {
                enabled: footerPaymentRadio[0].checked ? true : false,
                logo: [
                    {
                        src: removeParam('browsersync', footerPaymentLogo[0].getAttribute('src').includes('../') ? footerPaymentLogo[0].getAttribute('src').substr(3) : footerPaymentLogo[0].getAttribute('src').replace("http://localhost:3000/", "")),
                        width: footerPaymentDimension[2].value,
                        height: footerPaymentDimension[3].value
                    },
                    {
                        src: removeParam('browsersync', footerPaymentLogo[1].getAttribute('src').includes('../') ? footerPaymentLogo[1].getAttribute('src').substr(3) : footerPaymentLogo[1].getAttribute('src').replace("http://localhost:3000/", "")),
                        width: footerPaymentDimension[4].value,
                        height: footerPaymentDimension[5].value
                    },
                ]
            }
        }
        return footer
    }

    // authors function
    function settingAuthors() {
        // author variables
        const authorsWrap = document.querySelector('.authors-form-wrap')
        const authorsForm = authorsWrap.querySelectorAll('.uk-form-stacked')
        const authorsId = settingDataBuffer.authors
        const authors = []

        authorsForm.forEach((element, index) => {
            const inputAuthorName = element.querySelector('.setting-author-name')
            const inputAuthorEmail = element.querySelector('.setting-author-email')
            const inputAuthorRole = element.querySelector('.setting-author-role')
            const inputAuthorImage = element.querySelector('.setting-profile').querySelector('img')
            const authorImageSrc = removeParam('browsersync', inputAuthorImage.getAttribute('src').includes('../') ? inputAuthorImage.getAttribute('src').substr(3) : inputAuthorImage.getAttribute('src').replace("http://localhost:3000/", ""))

            authors.push(
                {
                    id: authorsId[index] == undefined ? Math.random().toString(24).slice(8) : authorsId[index].id,
                    name: inputAuthorName.value,
                    email: inputAuthorEmail.value,
                    role: inputAuthorRole.value,
                    avatar: authorImageSrc
                }
            )
        })

        return authors
    }

    // blog function
    function settingBlog() {
        const blog = {
            postPerPage: postPerPageEl.value,
            showWidgets: {
                allHide: widgetCategoriesEl.checked === false && widgetLatestEl.checked === false && widgetTagsEl.checked === false ? true : false,
                categories: widgetCategoriesEl.checked,
                latestPosts: widgetLatestEl.checked,
                tags: widgetTagsEl.checked
            },
            displayAuthor: displayAuthorRadio[0].checked ? true : false,
            displayTag: displayTagRadio[0].checked ? true : false,
            displayShareButtons: displayShareRadio[0].checked ? true : false,
            disqussShortname: disqussEl.value
        }

        return blog
    }

    // social media function
    function settingSocialMedia() {
        const socialMedia = {
            facebook: socialFacebookEl.value,
            twitter: socialTwitterkEl.value,
            instagram: socialInstagramEl.value,
            linkedin: socialLinkedinEl.value,
            behance: socialBehanceEl.value,
            whatsapp: socialWhatsappEl.value,
            telegram: socialTelegramEl.value,
            youtube: socialYoutubeEl.value
        }
        
        return socialMedia
    }

    // show site info data into the dom function
    function siteInfoForm(data) {
        const siteInfo = data.siteInfo

        pageTitleEl.value = siteInfo.pageTitle
        metaDescriptEl.textContent = siteInfo.metaDescription
        metaKeywordsEl.value = siteInfo.metaKeywords.join(', ')
        data.authors.forEach(e => {
            const optionItem = document.createElement('option')
            optionItem.setAttribute('value', e.name)
            optionItem.innerHTML = e.name
            metaAuthorEl.appendChild(optionItem)
        })
        metaAuthorEl.value = siteInfo.metaAuthor
        metaThemeColor.previousElementSibling.style.backgroundColor = siteInfo.metaThemeColor
        metaThemeColor.value = siteInfo.metaThemeColor
        metaThemeColor.nextElementSibling.textContent = siteInfo.metaThemeColor
        faviconEl.setAttribute('src', `../${siteInfo.favicon}`)
        touchIconEl.setAttribute('src', `../${siteInfo.touchIcon}`)
    }

    // show color data into the dom function
    function colorForm(data) {
        const colors = data.colors

        inputBackgroundColor.previousElementSibling.style.backgroundColor = colors.backgroundColor
        inputBackgroundColor.value = colors.backgroundColor
        inputBackgroundColor.nextElementSibling.textContent = colors.backgroundColor

        inputPrimaryColor.previousElementSibling.style.backgroundColor = colors.primaryColor
        inputPrimaryColor.value = colors.primaryColor
        inputPrimaryColor.nextElementSibling.textContent = colors.primaryColor

        inputSecondaryColor.previousElementSibling.style.backgroundColor = colors.secondaryColor
        inputSecondaryColor.value = colors.secondaryColor
        inputSecondaryColor.nextElementSibling.textContent = colors.secondaryColor

        inputHeadingColor.previousElementSibling.style.backgroundColor = colors.headingColor
        inputHeadingColor.value = colors.headingColor
        inputHeadingColor.nextElementSibling.textContent = colors.headingColor

        inputBodyTextColor.previousElementSibling.style.backgroundColor = colors.bodyTextColor
        inputBodyTextColor.value = colors.bodyTextColor
        inputBodyTextColor.nextElementSibling.textContent = colors.bodyTextColor

        inputLinkColor.previousElementSibling.style.backgroundColor = colors.linkColor
        inputLinkColor.value = colors.linkColor
        inputLinkColor.nextElementSibling.textContent = colors.linkColor
    }

    // show header data into the dom function
    function headerForm(data) {
        const header = data.header

        siteLogoEl.setAttribute('src', `../${header.siteLogo.src}`)
        logoWidthEl.value = header.siteLogo.width
        logoHeightEl.value = header.siteLogo.height
        signUpTitleEl.value = header.signup.title
        signUpUrlEl.value = header.signup.url
        signInTitleEl.value = header.signin.title
        signInUrlEl.value = header.signin.url
    }

    // show footer data into the dom function
    function footerForm(data) {
        const footer = data.footer

        copyrightTextEl.value = footer.copyrightText
        footerLinkRadio.forEach(radio => {
            if (footer.footerLink.enabled == true && radio.getAttribute('value') == 'enable') {
                radio.checked = true
            } else if (footer.footerLink.enabled == false && radio.getAttribute('value') == 'disable') {
                radio.checked = true
            }
        })
        footerLinkTitle.forEach((title, index) => {
            title.value = footer.footerLink.link[index].title
        })
        footerLinkUrl.forEach((url, index) => {
            url.value = footer.footerLink.link[index].url
        })
        footerPaymentRadio.forEach(radio => {
            if (footer.paymentLogo.enabled == true && radio.getAttribute('value') == 'enable') {
                radio.checked = true
            } else if (footer.paymentLogo.enabled == false && radio.getAttribute('value') == 'disable') {
                radio.checked = true
            }
        })
        footerPaymentLogo.forEach((image, index) => {
            image.setAttribute('src', `../${footer.paymentLogo.logo[index].src}`)
        })
        footerPaymentDimension[2].value = footer.paymentLogo.logo[0].width
        footerPaymentDimension[3].value = footer.paymentLogo.logo[0].height
        footerPaymentDimension[4].value = footer.paymentLogo.logo[1].width
        footerPaymentDimension[5].value = footer.paymentLogo.logo[1].height
    }
    

    // show author data into the dom function
    function authorForm(data) {
        const addAuthorBtn = document.getElementById('add-author')
        const authorWrap = document.querySelector('.authors-form-wrap')
        const authorData = data.authors

        // read author data and write into the dom    
        authorData.forEach(author => {
            const authorForm = document.createElement('form')

            authorForm.classList.add('uk-form-stacked', 'uk-grid-small', 'uk-margin')
            authorForm.setAttribute('data-uk-grid', '')
            authorForm.innerHTML = `
            <div class="uk-width-auto uk-flex uk-flex-bottom" data-uk-form-custom>
                <div class="uk-inline-clip uk-transition-toggle setting-profile" tabindex="0">
                    <img src="${author.avatar === 'img/blockit-avatar.svg' ? author.avatar : `../${author.avatar}`}" alt="profile-picture">
                    <div class="uk-transition-fade uk-position-cover uk-flex uk-flex-center uk-flex-middle">
                        <input class="img-author-upload" type="file">
                        <button class="uk-button fas fa-camera uk-label uk-border-pill" type="button" tabindex="-1"></button>
                    </div>
                </div>
            </div>
            <div class="uk-width-1-4">
                <label class="uk-form-label" for="setting-author-name">Name</label>
                <div class="uk-form-controls">
                    <input class="uk-input uk-border-rounded setting-author-name" type="text" value="${author.name}">
                </div>
            </div>
            <div class="uk-width-1-4">
                <label class="uk-form-label" for="setting-author-email">Email</label>
                <div class="uk-form-controls">
                    <input class="uk-input uk-border-rounded setting-author-email" type="text" value="${author.email}">
                </div>
            </div>
            <div class="uk-width-1-4">
                <label class="uk-form-label" for="setting-author-role">Role</label>
                <div class="uk-form-controls">
                    <input class="uk-input uk-border-rounded setting-author-role" type="text" value="${author.role}">
                </div>
            </div>
            <div class="uk-width-expand uk-flex uk-flex-bottom">
                <button class="uk-button uk-button-default uk-border-rounded delete-author-btn uk-width-1-1"><i class="fas fa-trash-alt fa-sm uk-margin-small-right"></i>Delete</button>
            </div>
            `

            authorWrap.appendChild(authorForm)
        })

        // add author button
        addAuthorBtn.addEventListener('click', () => {
            const addAuthorForm = document.createElement('form')

            addAuthorForm.classList.add('uk-form-stacked', 'uk-grid-small', 'uk-margin')
            addAuthorForm.setAttribute('data-uk-grid', '')    
            addAuthorForm.innerHTML = `
            <div class="uk-width-auto uk-flex uk-flex-bottom" data-uk-form-custom>
                <div class="uk-inline-clip uk-transition-toggle setting-profile" tabindex="0">
                    <img src="img/blockit-avatar.svg" alt="profile-picture">
                    <div class="uk-transition-fade uk-position-cover uk-flex uk-flex-center uk-flex-middle">
                        <input class="img-author-upload" type="file">
                        <button class="uk-button fas fa-camera uk-label uk-border-pill" type="button" tabindex="-1"></button>
                    </div>
                </div>
            </div>
            <div class="uk-width-1-4">
                <label class="uk-form-label" for="setting-author-name">Name</label>
                <div class="uk-form-controls">
                    <input class="uk-input uk-border-rounded setting-author-name" type="text">
                </div>
            </div>
            <div class="uk-width-1-4">
                <label class="uk-form-label" for="setting-author-email">Email</label>
                <div class="uk-form-controls">
                    <input class="uk-input uk-border-rounded setting-author-email" type="text">
                </div>
            </div>
            <div class="uk-width-1-4">
                <label class="uk-form-label" for="setting-author-role">Role</label>
                <div class="uk-form-controls">
                    <input class="uk-input uk-border-rounded setting-author-role" type="text">
                </div>
            </div>
            <div class="uk-width-expand uk-flex uk-flex-bottom">
                <button class="uk-button uk-button-default uk-border-rounded delete-author-btn uk-width-1-1"><i class="fas fa-trash-alt fa-sm uk-margin-small-right"></i>Delete</button>
            </div>
            `

            authorWrap.appendChild(addAuthorForm)
        })

        // delete author btn
        document.addEventListener('click', (e) => {
            if(e.target.classList.contains('delete-author-btn')) {
                const parentEl = e.target.closest('.uk-form-stacked')
                e.preventDefault()
                parentEl.remove()
            }
        })
    }

    // show blog data into the dom function
    function blogForm(data) {
        const blog = data.blog

        postPerPageEl.value = blog.postPerPage
        widgetCategoriesEl.checked = blog.showWidgets.categories
        widgetLatestEl.checked = blog.showWidgets.latestPosts
        widgetTagsEl.checked = blog.showWidgets.tags

        displayAuthorRadio.forEach(radio => {
            if (blog.displayAuthor == true && radio.getAttribute('value') == 'enable') {
                radio.checked = true
            } else if (blog.displayAuthor == false && radio.getAttribute('value') == 'disable') {
                radio.checked = true
            }
        })
        displayTagRadio.forEach(radio => {
            if (blog.displayTag == true && radio.getAttribute('value') == 'enable') {
                radio.checked = true
            } else if (blog.displayTag == false && radio.getAttribute('value') == 'disable') {
                radio.checked = true
            }
        })
        displayShareRadio.forEach(radio => {
            if (blog.displayShareButtons == true && radio.getAttribute('value') == 'enable') {
                radio.checked = true
            } else if (blog.displayShareButtons == false && radio.getAttribute('value') == 'disable') {
                radio.checked = true
            }
        })

        disqussEl.value = blog.disqussShortname
    }

    // show social media data into the dom function
    function socialMediaForm(data) {
        const socialMedia = data.socialMedia

        socialFacebookEl.value = socialMedia.facebook
        socialTwitterkEl.value = socialMedia.twitter
        socialInstagramEl.value = socialMedia.instagram
        socialLinkedinEl.value = socialMedia.linkedin
        socialBehanceEl.value = socialMedia.behance
        socialWhatsappEl.value = socialMedia.whatsapp
        socialTelegramEl.value = socialMedia.telegram
        socialYoutubeEl.value = socialMedia.youtube
    }

    // footer html editor
    function footerEditor(holder, saveBtn, data) {
        let footerData = data
        if(footerDataBuffer.blocks !== undefined) {
            footerData = footerDataBuffer
        }
        const editor = new EditorJS({
            holder : holder,
            minHeight: 0,
            data: footerData,
            tools: {
                code: CodeMirror
            },
            defaultBlock: 'code',
            logLevel: 'ERROR'
        })

        editor.isReady
        .then(() => {
            // run save code editor
            saveBtn(editor)

            // clear editor event
            document.addEventListener('click', (e) => { 
                if(e.target.classList.contains('uk-modal-close') || e.target.classList.contains('uk-togglabe-leave')) {
                    const editorWrap = document.querySelector('.codex-editor')
                    if(editorWrap !== null) editorWrap.remove()
                }
            })
        })
        .catch((reason) => {
            console.log(`Editor.js initialization failed because of ${reason}`)
        })
    }

    // save footer html editor
    function footerEditorSave(editor) {
        footerEditorSaveBtn.addEventListener('click', (e) => {
            e.preventDefault()

            editor.save().then((data) => {
                const editorWrap = document.querySelector('.codex-editor')

                delete data.time
                delete data.version
                Object.assign(footerDataBuffer, data)
                UIkit.modal('#setting-footer-html-wrap').hide()
                if(editorWrap !== null) editorWrap.remove()
            })
        })
    }

    // upload logo function
    function changeSiteLogo(input) {
        const siteLogoEl = input.closest('.uk-grid-small').querySelector('img')
        const buffer = input.files[0]
        const reader = new FileReader()
        let typeFile = ''
        switch(buffer.type) {
            case 'image/jpeg':
                typeFile = 'jpg'
                break
            case 'image/png':
                typeFile = 'png'
                break
            case 'image/gif':
                typeFile = 'gif'
                break
            case 'image/svg+xml':
                typeFile = 'svg'
                break
        }
        const nameFile = `logo-${Math.random().toString(36).slice(2)}.${typeFile}`

        reader.readAsArrayBuffer(buffer)
        reader.onload = async () => {
            input.nextElementSibling.innerHTML = '<img class="uk-margin-small-right blockit-spinner" src="img/blockit-spinner.svg" width="16">Loading...'

            ___browserSync___.socket.emit('assetsProcess', buffer, nameFile)
            ___browserSync___.socket.once('assetsDone', path => {
                siteLogoEl.removeAttribute('src')
                siteLogoEl.setAttribute('src', path)
                input.nextElementSibling.innerHTML = '<i class="fas fa-upload fa-sm uk-margin-small-right"></i>Upload logo'
            })
        }
        reader.onerror = () => console.log(reader.error)
    }

    // upload favicon function
    function changeFavicon(input) {
        const faviconEl = input.closest('.uk-grid-small').querySelector('img')
        const buffer = input.files[0]
        const reader = new FileReader()
        let typeFile = ''
        switch(buffer.type) {
            case 'image/x-icon':
                typeFile = 'ico'
                break
        }
        const nameFile = `favicon-${Math.random().toString(36).slice(2)}.${typeFile}`

        reader.readAsArrayBuffer(buffer)
        reader.onload = async () => {
            input.nextElementSibling.innerHTML = '<img class="uk-margin-small-right blockit-spinner" src="img/blockit-spinner.svg" width="16">Loading...'

            ___browserSync___.socket.emit('assetsProcess', buffer, nameFile)
            ___browserSync___.socket.once('assetsDone', path => {
                faviconEl.removeAttribute('src')
                faviconEl.setAttribute('src', path)
                input.nextElementSibling.innerHTML = '<i class="fas fa-upload fa-sm uk-margin-small-right"></i>Upload logo'
            })
        }
        reader.onerror = () => console.log(reader.error)
    }

    // upload touch icon function
    function changeTouchIcon(input) {
        const touchIconEl = input.closest('.uk-grid-small').querySelector('img')
        const buffer = input.files[0]
        const reader = new FileReader()
        let typeFile = ''
        switch(buffer.type) {
            case 'image/png':
                typeFile = 'png'
                break
        }
        const nameFile = `touch-icon-${Math.random().toString(36).slice(2)}.${typeFile}`

        reader.readAsArrayBuffer(buffer)
        reader.onload = async () => {
            input.nextElementSibling.innerHTML = '<img class="uk-margin-small-right blockit-spinner" src="img/blockit-spinner.svg" width="16">Loading...'

            ___browserSync___.socket.emit('assetsProcess', buffer, nameFile)
            ___browserSync___.socket.once('assetsDone', path => {
                touchIconEl.removeAttribute('src')
                touchIconEl.setAttribute('src', path)
                input.nextElementSibling.innerHTML = '<i class="fas fa-upload fa-sm uk-margin-small-right"></i>Upload logo'
            })
        }
        reader.onerror = () => console.log(reader.error)
    }

    // upload payment logo function
    function changePaymentLogo(input) {
        const paymentLogoEl = input.closest('.setting-footer-payment-logo').querySelector('img')
        const buffer = input.files[0]
        const reader = new FileReader()
        let typeFile = ''
        switch(buffer.type) {
            case 'image/jpeg':
                typeFile = 'jpg'
                break
            case 'image/png':
                typeFile = 'png'
                break
            case 'image/gif':
                typeFile = 'gif'
                break
            case 'image/svg+xml':
                typeFile = 'svg'
                break
        }
        const nameFile = `footer-payment-${Math.random().toString(36).slice(2)}.${typeFile}`

        reader.readAsArrayBuffer(buffer)
        reader.onload = async () => {
            paymentLogoEl.removeAttribute('src')
            paymentLogoEl.parentElement.classList.add('spinner')
            paymentLogoEl.setAttribute('src', 'img/blockit-spinner-2.svg')

            ___browserSync___.socket.emit('assetsProcess', buffer, nameFile)
            ___browserSync___.socket.once('assetsDone', path => {
                paymentLogoEl.removeAttribute('src')
                paymentLogoEl.parentElement.classList.remove('spinner')
                paymentLogoEl.setAttribute('src', path)
            })
        }
        reader.onerror = () => console.log(reader.error)
    }

    // upload author image function
    function changeAuthor(input) {
        const authorEl = input.closest('.setting-profile').querySelector('img')
        const buffer = input.files[0]
        const reader = new FileReader()
        let typeFile = ''
        switch(buffer.type) {
            case 'image/jpeg':
                typeFile = 'jpg'
                break
            case 'image/png':
                typeFile = 'png'
                break
            case 'image/gif':
                typeFile = 'gif'
                break
            case 'image/svg+xml':
                typeFile = 'svg'
                break
        }
        const nameFile = `author-${Math.random().toString(36).slice(2)}.${typeFile}`

        reader.readAsArrayBuffer(buffer)
        reader.onload = async () => {
            authorEl.removeAttribute('src')
            authorEl.parentElement.classList.add('spinner')
            authorEl.setAttribute('src', 'img/blockit-spinner-2.svg')

            ___browserSync___.socket.emit('assetsProcess', buffer, nameFile)
            ___browserSync___.socket.once('assetsDone', path => {
                authorEl.removeAttribute('src')
                authorEl.parentElement.classList.remove('spinner')
                authorEl.setAttribute('src', path)
            })
        }
        reader.onerror = () => console.log(reader.error)
    }

    // stick to current tab when page refresh
    function lastSettingsTab() {
        const ukTabEl = document.querySelector('.uk-tab-left')
        const ukTabList = ukTabEl.querySelectorAll('li')
        const ukTabContent = document.querySelector('#component-tab-left')
        const ukTabContentList = ukTabContent.querySelectorAll('li')
        const hash = location.hash.substr(1)

        ukTabList.forEach(list => {
            list.addEventListener('click', e => window.location.hash = e.target.getAttribute('href').substr(1))
            list.classList.remove('uk-active')
            if(list.children[0].getAttribute('href').substr(1) == hash) {
                list.classList.add('uk-active')
            }
        })
        ukTabContentList.forEach(list => {
            list.classList.remove('uk-active')
            if(list.classList.value == hash) {
                list.classList.add('uk-active')
            }
        })

        if(performance.navigation.type == performance.navigation.TYPE_RELOAD) {
            ukTabList.forEach(list => {
                list.classList.remove('uk-active')
                if(list.children[0].getAttribute('href').substr(1) == hash) {
                    list.classList.add('uk-active')
                }
            })
            ukTabContentList.forEach(list => {
                list.classList.remove('uk-active')
                if(list.classList.value == hash) {
                    list.classList.add('uk-active')
                }
            })
        }
    }

    // remove unused parameter in url
    function removeParam(key, sourceURL) {
        let rtn = sourceURL.split("?")[0],
            param,
            params_arr = [],
            queryString = (sourceURL.indexOf("?") !== -1) ? sourceURL.split("?")[1] : "";
        if (queryString !== "") {
            params_arr = queryString.split("&");
            for (let i = params_arr.length - 1; i >= 0; i -= 1) {
                param = params_arr[i].split("=")[0];
                if (param === key) {
                    params_arr.splice(i, 1);
                }
            }
            if (params_arr.length) rtn = rtn + "?" + params_arr.join("&");
        }
        return rtn;
    }

    // show success notification function
    function showNotif(message) {
        const notifEl = document.querySelector('.blockit-notif')
        const notifWrap = document.createElement('div')

        notifWrap.classList.add('uk-alert-primary', 'uk-animation-slide-top-small')
        notifWrap.setAttribute('data-uk-alert', '')
        notifWrap.innerHTML = message
        notifEl.insertBefore(notifWrap, notifEl.firstChild)
        setTimeout(() => notifWrap.remove(), 3600)
    }
}